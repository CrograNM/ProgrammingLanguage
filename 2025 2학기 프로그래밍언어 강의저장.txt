

=========================================
저장한 시간: 2025-09-08 오후 5:31:31 월요일
=========================================

//--------------------------------------------------------------------
// 2025. 3-2. 프로그래밍언어, 9월 8일 월요일 (2주 1일)
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

int main()
{
	std::cout << "구구단을 출력하겠습니다." << std::endl;
	
	save("메인.cpp");
}

=========================================
저장한 시간: 2025-09-08 오후 5:36:31 월요일
=========================================

//--------------------------------------------------------------------
// 2025. 3-2. 프로그래밍언어, 9월 8일 월요일 (2주 1일)
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

int main()
{
	std::cout << "구구단을 출력하겠습니다." << std::endl;
	
	while (true) {
		std::cout << "몇 단? ";

		int n;
		std::cin >> n;

		if (n < 2 || n > 9) {
			std::cout << "2~9 사이의 값을 입력하세요!" << std::endl;
			break;
		}
		for (int i = 1; i <= 9; ++i) {
			std::cout << n << " x " << i << " = " << n * i << std::endl;
		}
	}

	save("메인.cpp");
}

=========================================
������ �ð�: 2025-09-08 ���� 5:46:06 ������
=========================================

﻿//--------------------------------------------------------------------
// 2025. 3-2. 프로그래밍언어, 9월 8일 월요일 (2주 1일)
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

int main()
{
	std::cout << "구구단을 출력하겠습니다." << std::endl;
	
	while (true) {
		std::cout << "몇 단? ";

		int dan;
		std::cin >> dan;

		if (dan < 2 || dan > 9) {
			std::cout << "2~9 사이의 값을 입력하세요!" << std::endl;
			break;
		}

		// n단 출력
		std::cout << dan << "단" << std::endl;
		for (int i = 1; i <= 9; ++i) {
			std::cout << dan << " x " << i << " = " << dan * i << std::endl;
		}
	}
	save("메인.cpp");
}

=========================================
������ �ð�: 2025-09-08 ���� 5:49:42 ������
=========================================

﻿//--------------------------------------------------------------------
// 2025. 3-2. 프로그래밍언어, 9월 8일 월요일 (2주 1일)
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

// [문제] 전체 구구단을 출력하는 프로그램을 작성하시오.

int main()
{
	int dan;

	for (dan = 2; dan <= 9; ++dan) {
		std::cout << "\n=== " << dan << "단 ===" << std::endl;
		for (int i = 1; i <= 9; ++i) {
			std::cout << dan << " * " << i << " = " << dan * i << std::endl;
		}
		std::cout << std::endl;
	}

	save("메인.cpp");
}

=========================================
Save Time: 2025-09-08 ���� 5:54:23 ������
=========================================

﻿//--------------------------------------------------------------------
// 2025. 3-2. 프로그래밍언어, 9월 8일 월요일 (2주 1일)
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

// [문제] 전체 구구단을 출력하는 프로그램을 작성하시오.

int main()
{
	int dan;

	for (dan = 2; dan <= 9; ++dan) {
		std::cout << "\n=== " << dan << "단 ===" << std::endl;
		for (int i = 1; i <= 9; ++i) {
			std::cout << dan << " * " << i << " = " << dan * i << std::endl;
		}
		std::cout << std::endl;
	}

	save("메인.cpp");
}

=========================================
Save Time: 2025-09-08 ���� 6:03:59 ������
=========================================

﻿//--------------------------------------------------------------------
// 2025. 3-2. 프로그래밍언어, 9월 8일 월요일 (2주 1일)
//--------------------------------------------------------------------

#include <iostream>
#include <iomanip>
#include "save.h"

// [문제] 전체 구구단을 예시와 꼭 같이 그대로 출력하라 (줄맞춤)
// 단과 단 사이는 한 줄 띄워라

// (예시)
// 7 x 1 =  7
// 7 x 2 = 14
// ...

int main()
{
	for (int dan = 2; dan <= 9; ++dan) {
		for (int i = 1; i <= 9; ++i) {
			std::cout << dan << " x " << i << " = " << std::setw(2) << dan * i << '\n';
		}
		std::cout << '\n';
	}

	save("메인.cpp");
}

=========================================
Save Time: 2025-09-08 ���� 6:06:29 ������
=========================================

﻿//--------------------------------------------------------------------
// 2025. 3-2. 프로그래밍언어, 9월 8일 월요일 (2주 1일)
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

// [문제] 전체 구구단을 예시와 꼭 같이 그대로 출력하라 (줄맞춤)
// 단과 단 사이는 한 줄 띄워라

// (예시)
// 7 x 1 =  7
// 7 x 2 = 14
// ...

// 정답은 format이라고 한다.

int main()
{
	for (int dan = 2; dan <= 9; ++dan) {
		for (int i = 1; i <= 9; ++i) {
			std::cout << std::format("{0} x {1} = {2:2}\n", dan, i, dan * i);
		}
		std::cout << '\n';
	}
	save("메인.cpp");
}

=========================================
Save Time: 2025-09-08 ���� 6:10:23 ������
=========================================

﻿//--------------------------------------------------------------------
// 2025. 3-2. 프로그래밍언어, 9월 8일 월요일 (2주 1일)
//--------------------------------------------------------------------

#include <iostream>
#include <print>
#include "save.h"

// [문제] 전체 구구단을 예시와 꼭 같이 그대로 출력하라 (줄맞춤)
// 단과 단 사이는 한 줄 띄워라

// (예시)
// 7 x 1 =  7
// 7 x 2 = 14
// ...

// 정답은 format이라고 한다.

int main()
{
	for (int dan = 2; dan <= 9; ++dan) {
		for (int i = 1; i <= 9; ++i) {
			std::println("{0} x {1} = {2:2}", dan, i, dan * i); 
			// #include <print> 사용
		}
		std::cout << '\n';
	}
	save("메인.cpp");
}

=========================================
Save Time: 2025-09-08 ���� 6:13:48 ������
=========================================

﻿//--------------------------------------------------------------------
// 2025. 3-2. 프로그래밍언어, 9월 8일 월요일 (2주 1일)
//--------------------------------------------------------------------

#include <iostream>
#include <print>
#include "save.h"

// [문제] 전체 구구단을 예시와 꼭 같이 그대로 출력하라 (줄맞춤)
// 단과 단 사이는 한 줄 띄워라

// (예시)
// 7 x 1 =  7
// 7 x 2 = 14
// ...

// 정답은 format이라고 한다.

int main()
{
	for (int dan = 2; dan <= 9; ++dan) {
		for (int i = 1; i <= 9; ++i) {
			std::println("{0} x {1} = {2:>20}", dan, i, dan * i); 
			// #include <print> 사용
		}
		std::cout << '\n';
	}
	save("메인.cpp");
}

=========================================
Save Time: 2025-09-08 ���� 6:14:28 ������
=========================================

﻿//--------------------------------------------------------------------
// 2025. 3-2. 프로그래밍언어, 9월 8일 월요일 (2주 1일)
//--------------------------------------------------------------------

#include <iostream>
#include <print>
#include "save.h"

// [문제] 전체 구구단을 예시와 꼭 같이 그대로 출력하라 (줄맞춤)
// 단과 단 사이는 한 줄 띄워라

// (예시)
// 7 x 1 =  7
// 7 x 2 = 14
// ...

// 정답은 format이라고 한다.

int main()
{
	for (int dan = 2; dan <= 9; ++dan) {
		for (int i = 1; i <= 9; ++i) {
			std::println("{0} x {1} = {2:>20}", dan, i, dan * i); 
			// #include <print> 사용
		}
		std::cout << '\n';
	}
	save("메인.cpp");
}

=========================================
Save Time: 2025-09-08 ���� 6:14:57 ������
=========================================

﻿//--------------------------------------------------------------------
// 2025. 3-2. 프로그래밍언어, 9월 8일 월요일 (2주 1일)
//--------------------------------------------------------------------

#include <iostream>
#include <print>
#include "save.h"

// [문제] 전체 구구단을 예시와 꼭 같이 그대로 출력하라 (줄맞춤)
// 단과 단 사이는 한 줄 띄워라

// (예시)
// 7 x 1 =  7
// 7 x 2 = 14
// ...

// 정답은 format이라고 한다.

int main()
{
	for (int dan = 2; dan <= 9; ++dan) {
		for (int i = 1; i <= 9; ++i) {
			std::println("{0} x {1} = {2:^20}", dan, i, dan * i); 
			// #include <print> 사용
		}
		std::cout << '\n';
	}
	save("메인.cpp");
}

=========================================
Save Time: 2025-09-08 ���� 6:15:18 ������
=========================================

﻿//--------------------------------------------------------------------
// 2025. 3-2. 프로그래밍언어, 9월 8일 월요일 (2주 1일)
//--------------------------------------------------------------------

#include <iostream>
#include <print>
#include "save.h"

// [문제] 전체 구구단을 예시와 꼭 같이 그대로 출력하라 (줄맞춤)
// 단과 단 사이는 한 줄 띄워라

// (예시)
// 7 x 1 =  7
// 7 x 2 = 14
// ...

// 정답은 format이라고 한다.

int main()
{
	for (int dan = 2; dan <= 9; ++dan) {
		for (int i = 1; i <= 9; ++i) {
			std::println("{1} x {0} = {2:^20}", dan, i, dan * i); 
			// #include <print> 사용
		}
		std::cout << '\n';
	}
	save("메인.cpp");
}

=========================================
Save Time: 2025-09-08 ���� 6:20:26 ������
=========================================

﻿//--------------------------------------------------------------------
// 2025. 3-2. 프로그래밍언어, 9월 8일 월요일 (2주 1일)
//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

//--------
int main()
//--------
{
	int n = 1234;

	std::cout << "현재 n에 저장된 값 - " << n << '\n';

	save("메인.cpp");
}

=========================================
Save Time: 2025-09-08 ���� 6:25:37 ������
=========================================

﻿//--------------------------------------------------------------------
// 2025. 3-2. 프로그래밍언어, 9월 8일 월요일 (2주 1일)
//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

// int에 저장할 수 있는 값 중에서 가장 큰 값을 저장하라.

//--------
int main()
//--------
{
	int n;
	
	//n이라는 32bit에 1로 모두 채우는 법
	n = ~0; // 0을 비트 반전

	std::cout << "현재 n에 저장된 값 - " << n << '\n';

	save("메인.cpp");
}

=========================================
Save Time: 2025-09-08 ���� 6:26:19 ������
=========================================

﻿//--------------------------------------------------------------------
// 2025. 3-2. 프로그래밍언어, 9월 8일 월요일 (2주 1일)
//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

// int에 저장할 수 있는 값 중에서 가장 큰 값을 저장하라.

//--------
int main()
//--------
{
	int n;
	
	//n이라는 32bit에 1로 모두 채우는 법 맨 앞만 0으로 채우는 법
	n = (1 << 31) - 1;

	std::cout << "현재 n에 저장된 값 - " << n << '\n';

	save("메인.cpp");
}

=========================================
Save Time: 2025-09-08 ���� 6:28:01 ������
=========================================

﻿//--------------------------------------------------------------------
// 2025. 3-2. 프로그래밍언어, 9월 8일 월요일 (2주 1일)
//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

// int에 저장할 수 있는 값 중에서 가장 큰 값을 저장하라.

//--------
int main()
//--------
{
	int n;
	
	//n이라는 32bit에 1로 모두 채우는 법 맨 앞만 0으로 채우는 법
	//n = (1 << 31) - 1;
	n = 0B01111111'11111111'11111111'11111111;

	std::cout << "현재 n에 저장된 값 - " << n << '\n';

	save("메인.cpp");
}

=========================================
Save Time: 9/8/2025 6:30:06 PM Monday
=========================================

﻿//--------------------------------------------------------------------
// 2025. 3-2. 프로그래밍언어, 9월 8일 월요일 (2주 1일)
//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

// int에 저장할 수 있는 값 중에서 가장 큰 값을 저장하라.

//--------
int main()
//--------
{
	int n = 0B01111111'11111111'11111111'11111111;

	n = n + 1;

	std::cout << "현재 n에 저장된 값 - " << n << '\n';

	save("메인.cpp");
}

=========================================
Save Time: 9/8/2025 6:32:57 PM Monday
=========================================

﻿//--------------------------------------------------------------------
// 2025. 3-2. 프로그래밍언어, 9월 8일 월요일 (2주 1일)
//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include <bitset> 
#include "save.h"

// int에 저장할 수 있는 값 중에서 가장 큰 값을 저장하라.

//--------
int main()
//--------
{
	int n = 0B01111111'11111111'11111111'11111111;

	n = n + 1;

	std::cout << "현재 n에 저장된 값 - " << n << '\n';

	std::cout << "n의 메모리를 화면에 그대로 출력하면" << '\n';
	std::cout << std::bitset<32>(n) << '\n';
	// #include <bitset> // 이걸 이용해서 가능, 평생 쓸일은 없을거임

	save("메인.cpp");
}

=========================================
Save Time: 9/8/2025 6:33:27 PM Monday
=========================================

﻿//--------------------------------------------------------------------
// 2025. 3-2. 프로그래밍언어, 9월 8일 월요일 (2주 1일)
//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include <bitset> 
#include "save.h"

// int에 저장할 수 있는 값 중에서 가장 큰 값을 저장하라.

//--------
int main()
//--------
{
	int n = 0B01111111'11111111'11111111'11111111;

	//n = n + 1;

	std::cout << "현재 n에 저장된 값 - " << n << '\n';

	std::cout << "n의 메모리를 화면에 그대로 출력하면" << '\n';
	std::cout << std::bitset<32>(n) << '\n';
	// #include <bitset> // 이걸 이용해서 가능, 평생 쓸일은 없을거임

	// C++은 메모리를 공부하는 언어

	save("메인.cpp");
}

=========================================
Save Time: 9/8/2025 6:35:23 PM Monday
=========================================

﻿//--------------------------------------------------------------------
// 2025. 3-2. 프로그래밍언어, 9월 8일 월요일 (2주 1일)
//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include <bitset> 
#include "save.h"

// int에 저장할 수 있는 값 중에서 가장 큰 값을 저장하라.

//--------
int main()
//--------
{
	int n = 1024; //1KB
	std::cout << std::bitset<32>(n) << '\n';

	save("메인.cpp");
}

=========================================
Save Time: 9/8/2025 6:36:52 PM Monday
=========================================

﻿//--------------------------------------------------------------------
// 2025. 3-2. 프로그래밍언어, 9월 8일 월요일 (2주 1일)
//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include <bitset> 
#include "save.h"

// int에 저장할 수 있는 값 중에서 가장 큰 값을 저장하라.

//--------
int main()
//--------
{
	int n = 1024 * 1024;
	std::cout << std::bitset<32>(n) << '\n';

	save("메인.cpp");
}

=========================================
Save Time: 9/8/2025 6:37:30 PM Monday
=========================================

﻿//--------------------------------------------------------------------
// 2025. 3-2. 프로그래밍언어, 9월 8일 월요일 (2주 1일)
//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include <bitset> 
#include "save.h"

// int에 저장할 수 있는 값 중에서 가장 큰 값을 저장하라.

//--------
int main()
//--------
{
	int n = 1023;
	std::cout << std::bitset<32>(n) << '\n';

	save("메인.cpp");
}

=========================================
Save Time: 9/8/2025 6:38:03 PM Monday
=========================================

﻿//--------------------------------------------------------------------
// 2025. 3-2. 프로그래밍언어, 9월 8일 월요일 (2주 1일)
//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include <bitset> 
#include "save.h"

// int에 저장할 수 있는 값 중에서 가장 큰 값을 저장하라.

//--------
int main()
//--------
{
	int n = 1024 * 1024 * 1024 * 1024; // KB, MB, GB, TB
	std::cout << std::bitset<32>(n) << '\n';

	save("메인.cpp");
}

=========================================
Save Time: 9/8/2025 6:38:24 PM Monday
=========================================

﻿//--------------------------------------------------------------------
// 2025. 3-2. 프로그래밍언어, 9월 8일 월요일 (2주 1일)
//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include <bitset> 
#include "save.h"

// int에 저장할 수 있는 값 중에서 가장 큰 값을 저장하라.

//--------
int main()
//--------
{
	int n = 1024 * 1024 * 1024 * 1024; // KB, MB, GB, TB
	std::cout << std::bitset<64>(n) << '\n';

	save("메인.cpp");
}

=========================================
Save Time: 9/8/2025 6:38:35 PM Monday
=========================================

﻿//--------------------------------------------------------------------
// 2025. 3-2. 프로그래밍언어, 9월 8일 월요일 (2주 1일)
//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include <bitset> 
#include "save.h"

// int에 저장할 수 있는 값 중에서 가장 큰 값을 저장하라.

//--------
int main()
//--------
{
	int n = 1024 * 1024 * 1024 * 1024; // KB, MB, GB, TB
	std::cout << std::bitset<86>(n) << '\n';

	save("메인.cpp");
}

=========================================
Save Time: 9/8/2025 6:38:48 PM Monday
=========================================

﻿//--------------------------------------------------------------------
// 2025. 3-2. 프로그래밍언어, 9월 8일 월요일 (2주 1일)
//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include <bitset> 
#include "save.h"

// int에 저장할 수 있는 값 중에서 가장 큰 값을 저장하라.

//--------
int main()
//--------
{
	int n = 1024 * 1024 * 1024; // KB, MB, GB
	std::cout << std::bitset<32>(n) << '\n';

	save("메인.cpp");
}

=========================================
Save Time: 9/8/2025 6:40:59 PM Monday
=========================================

﻿//--------------------------------------------------------------------
// 2025. 3-2. 프로그래밍언어, 9월 8일 월요일 (2주 1일)
//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include <bitset> 
#include "save.h"

// int에 저장할 수 있는 값 중에서 가장 큰 값을 저장하라.

//--------
int main()
//--------
{
	//int n = 0B01111111'11111111'11111111'11111111; // <-- 이거 절대 안쓴다.
	int n = 0x7F'FF'FF'FF; // 16진수는 2진수를 다루기 위해 있는거다.
	std::cout << n << '\n';

	save("메인.cpp");
}

=========================================
Save Time: 9/8/2025 6:48:45 PM Monday
=========================================

﻿//--------------------------------------------------------------------
// 2025. 3-2. 프로그래밍언어, 9월 8일 월요일 (2주 1일)
//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

// int에 저장할 수 있는 값 중에서 가장 큰 값을 저장하라.

//--------
int main()
//--------
{
	// int는 4바이트가 아니다?
	// 표준	: int는 최소 2바이트 이상이어야 한다.
	// 실제	: int는 보통 4바이트이다.

	int n = std::numeric_limits<int>::max();

	std::cout << n << '\n';

	save("메인.cpp");
}

=========================================
Save Time: 9/8/2025 6:49:23 PM Monday
=========================================

﻿//--------------------------------------------------------------------
// 2025. 3-2. 프로그래밍언어, 9월 8일 월요일 (2주 1일)
//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

// int에 저장할 수 있는 값 중에서 가장 큰 값을 저장하라.

//--------
int main()
//--------
{
	int n = std::numeric_limits<int>::max();

	n += 1; // 오버플로우 발생, 음수의 최솟값이 됨

	std::cout << n << '\n';

	save("메인.cpp");
}

=========================================
Save Time: 9/8/2025 6:50:36 PM Monday
=========================================

﻿//--------------------------------------------------------------------
// 2025. 3-2. 프로그래밍언어, 9월 8일 월요일 (2주 1일)
//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

// int에 저장할 수 있는 값 중에서 가장 큰 값을 저장하라.

//--------
int main()
//--------
{
	long long n = std::numeric_limits<long long>::max(); 
	// long long int, short int 등에서 int 생략 가능

	std::cout << n << '\n';

	save("메인.cpp");
}

=========================================
Save Time: 9/8/2025 6:58:21 PM Monday
=========================================

﻿//--------------------------------------------------------------------
// 2025. 3-2. 프로그래밍언어, 9월 8일 월요일 (2주 1일)
//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include <bitset>
#include "save.h"

// [실습] 다른 기본 자료형도 지금 한 것과 같이 반복하며 메모리와 친해지자

//--------
int main()
//--------
{
	int n = 0x01020304;
	std::cout << std::bitset<32>(n) << '\n';

	/*int n = std::numeric_limits<int>::max();
	std::cout << "int_max : " << n << '\n';

	float f = std::numeric_limits<float>::max();
	std::cout << "float_max : " << f << '\n';

	double d = std::numeric_limits<double>::max();
	std::cout << "double_max : " << d << '\n';*/

	save("메인.cpp");
}

=========================================
Save Time: 9/8/2025 7:02:30 PM Monday
=========================================

﻿//--------------------------------------------------------------------
// 2025. 3-2. 프로그래밍언어, 9월 8일 월요일 (2주 1일)
//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include <bitset>
#include "save.h"

// [실습] 다른 기본 자료형도 지금 한 것과 같이 반복하며 메모리와 친해지자

//--------
int main()
//--------
{
	int n = 0x01020304;
	std::cout << std::bitset<32>(n) << '\n';

	// 메모리가 저장되는 순서는 기계에 따라 다르다
	// 이것을 little endian, big endian이라고 한다.
	// 조금만 설명하자면
	// 0x01020304라는 4바이트 정수를 메모리에 저장할 때
	// little endian은 04 03 02 01 순서로 저장하고
	// big endian은 01 02 03 04 순서로 저장한다.

	int n2 = std::numeric_limits<int>::max();
	std::cout << "int_max : " << n2 << '\n';

	float f = std::numeric_limits<float>::max();
	std::cout << "float_max : " << f << '\n';

	double d = std::numeric_limits<double>::max();
	std::cout << "double_max : " << d << '\n';

	save("메인.cpp");
}

=========================================
Save Time: 9/10/2025 5:38:48 PM Wednesday
=========================================

﻿//--------------------------------------------------------------------
// 2025. 3-2. 프로그래밍언어, 9월 10일 수요일 (2주 2일)
//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include <bitset>
#include "save.h"

// [실습] 다른 기본 자료형도 지금 한 것과 같이 반복하며 메모리와 친해지자

//--------
int main()
//--------
{
	char c;	
	int n;
	// int n; <- 이 문장 : 토큰이란, 컴퓨터가 구분할 수 있는 최소한의 문법적인 요소, 단위
	// 3개로 이루어진 문장이다.
	// int, n, ; : int와 n 두개의 token으로 이루어진 이 문장은 매우 특별하다.

	3 + 5;
	int;
	save("메인.cpp");
}

=========================================
Save Time: 9/10/2025 5:41:13 PM Wednesday
=========================================

﻿//--------------------------------------------------------------------
// 2025. 3-2. 프로그래밍언어, 9월 10일 수요일 (2주 2일)
//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include <bitset>
#include "save.h"

// [실습] 다른 기본 자료형도 지금 한 것과 같이 반복하며 메모리와 친해지자

//--------
int main()
//--------
{
	int n;		// 앞에 token은 자료형(data type)
				// 뒤에 token은 식별자(identifier)라고 한다.

	save("메인.cpp");
}

=========================================
Save Time: 9/10/2025 5:59:05 PM Wednesday
=========================================

﻿//--------------------------------------------------------------------
// 2025. 3-2. 프로그래밍언어, 9월 10일 수요일 (2주 2일)
//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include <bitset>
#include "save.h"

// [실습] 다른 기본 자료형도 지금 한 것과 같이 반복하며 메모리와 친해지자

//--------
int main()
//--------
{
	int n;		// 앞에 token은 자료형(data type)
				// 뒤에 token은 식별자(identifier)라고 한다.

	/*
		int n;
		
		int : 메모리를 sizeof int 만큼 요청
		n  : 요청한 메모리의 시작 주소를 n이라는 이름, 내 마음대로 이름 붙인 식별자이다.

		<Access : Read Access, Write Access>
		==================================================================
		n이라는 이름으로 메모리에 access 할 수 있는 이유는
		컴파일할 때 그 메모리 주소를 결정할 수 있기 때문에 이런 코딩이 가능하다.
		번지수가 n이라는 이름으로 딱 결정되는 것이다.

		폰 노이만 구조 찾아보기.
		==================================================================
	*/

	save("메인.cpp");
}

=========================================
Save Time: 9/10/2025 6:05:22 PM Wednesday
=========================================

﻿//--------------------------------------------------------------------
// 2025. 3-2. 프로그래밍언어, 9월 10일 수요일 (2주 2일)
//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

// 메모리를 달라는 요청은 3가지(메모리가 생성되는 위치) 밖에 없다.
// 1. 지역변수(스택 메모리) - 함수가 호출될 때
// 2. 전역변수(글로벌 변수) - 프로그램이 시작될 때
// 3. 동적할당(힙 메모리) - 개발자가 요청할 때

int n; // 2. 전역변수(Global)

//--------
int main()
//--------
{
	int n;	// 1. 지역변수(Local)
	
	new int; // 3. 동적할당(Dynamic Allocation)

	save("메인.cpp");
}

=========================================
Save Time: 9/10/2025 6:07:13 PM Wednesday
=========================================

﻿//--------------------------------------------------------------------
// 2025. 3-2. 프로그래밍언어, 9월 10일 수요일 (2주 2일)
//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

// 메모리를 달라는 요청은 3가지(메모리가 생성되는 위치) 밖에 없다.

// [실습] 각 메모리의 위치를 출력해본다.

int n; // 2. 전역변수(Global)

//--------
int main()
//--------
{
	int n;	// 1. 지역변수(Local)
	std::cout << "지역변수 n의 주소: " << std::addressof(n) << '\n';
	
	new int; // 3. 동적할당(Dynamic Allocation)

	save("메인.cpp");
}

=========================================
Save Time: 9/10/2025 6:08:58 PM Wednesday
=========================================

﻿//--------------------------------------------------------------------
// 2025. 3-2. 프로그래밍언어, 9월 10일 수요일 (2주 2일)
//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

// 메모리를 달라는 요청은 3가지(메모리가 생성되는 위치) 밖에 없다.

// [실습] 각 메모리의 위치를 출력해본다.

int n; // 2. 전역변수(Global)

//--------
int main()
//--------
{
	int n;	// 1. 지역변수(Local)
	std::cout << "지역변수 n의 주소: " << std::addressof(n) << '\n';
	std::cout << "전역변수 n의 주소: " << std::addressof(::n) << '\n'; 
	// 사실 이름을 바꾸는 게 맞지만, ::n으로 전역변수 접근이 가능하다.

	new int; // 3. 동적할당(Dynamic Allocation)

	save("메인.cpp");
}

=========================================
Save Time: 9/10/2025 6:11:10 PM Wednesday
=========================================

﻿//--------------------------------------------------------------------
// 2025. 3-2. 프로그래밍언어, 9월 10일 수요일 (2주 2일)
//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

//--------
int main()
//--------
{
	float f;
	int n;

	std::cout << "f의 번지 - " << std::addressof(f) << '\n';
	std::cout << "n의 번지 - " << std::addressof(n) << '\n';

	// 둘 다 지역변수이므로 유사한 번지를 갖는다.

	save("메인.cpp");
}

=========================================
Save Time: 9/10/2025 6:11:39 PM Wednesday
=========================================

﻿//--------------------------------------------------------------------
// 2025. 3-2. 프로그래밍언어, 9월 10일 수요일 (2주 2일)
//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

//--------
int main()
//--------
{
	float f;
	int n;

	std::cout << "f의 번지 - " << std::addressof(f) << '\n';
	std::cout << "n의 번지 - " << std::addressof(n) << '\n';

	// 둘 다 지역변수이므로 유사한 번지를 갖는다.
	// f의 번지 - 000000293ACFF624
	// n의 번지 - 000000293ACFF644

	save("메인.cpp");
}

=========================================
Save Time: 9/10/2025 6:13:42 PM Wednesday
=========================================

﻿//--------------------------------------------------------------------
// 2025. 3-2. 프로그래밍언어, 9월 10일 수요일 (2주 2일)
//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

int a, b;

//--------
int main()
//--------
{
	float f;
	int n;

	std::cout << "f의 번지 - " << std::addressof(f) << '\n';
	std::cout << "n의 번지 - " << std::addressof(n) << '\n';
	std::cout << '\n';

	std::cout << "a의 번지 - " << std::addressof(a) << '\n';
	std::cout << "b의 번지 - " << std::addressof(b) << '\n';

	save("메인.cpp");
}

=========================================
Save Time: 9/10/2025 6:21:21 PM Wednesday
=========================================

﻿//--------------------------------------------------------------------
// 2025. 3-2. 프로그래밍언어, 9월 10일 수요일 (2주 2일)
//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

//--------
int main()
//--------
{

	/*
	낮은 번지	STACK - 지역변수가 저장되는 영역						int main() { *----* }
				Free Store (Heap) - 동적할당된 변수가 저장되는 영역	*new int;*
	높은 번지	DATA - 전역변수가 저장되는 영역						*----* int main() {}
	*/

	save("메인.cpp");
}

=========================================
Save Time: 9/10/2025 6:25:58 PM Wednesday
=========================================

﻿//--------------------------------------------------------------------
// 2025. 3-2. 프로그래밍언어, 9월 10일 수요일 (2주 2일)
//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

//--------
int main()
//--------
{
	int n;

	// 이름 붙인 변수 n이 있다면 이것의 정체를 언제나 다음 3가지 코드로 파악할 수 있다.
	
	std::cout << "n의 메모리 크기 - " << sizeof n << "\n"; // 유일하게 sizeof는 괄호 생략 표현이 가능
	std::cout << "n의 메모리 주소 - " << std::addressof(n) << "\n";
	std::cout << "n의 데이터 타입 - " << typeid(n).name() << "\n";

	save("메인.cpp");
}

=========================================
Save Time: 9/10/2025 6:26:35 PM Wednesday
=========================================

﻿//--------------------------------------------------------------------
// 2025. 3-2. 프로그래밍언어, 9월 10일 수요일 (2주 2일)
//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

//--------
int main()
//--------
{
	float n;

	// 이름 붙인 변수 n이 있다면 이것의 정체를 언제나 다음 3가지 코드로 파악할 수 있다.
	
	std::cout << "n의 메모리 크기 - " << sizeof n << "\n"; // 유일하게 sizeof는 괄호 생략 표현이 가능
	std::cout << "n의 메모리 주소 - " << std::addressof(n) << "\n";
	std::cout << "n의 데이터 타입 - " << typeid(n).name() << "\n";

	save("메인.cpp");
}

=========================================
Save Time: 9/10/2025 6:26:44 PM Wednesday
=========================================

﻿//--------------------------------------------------------------------
// 2025. 3-2. 프로그래밍언어, 9월 10일 수요일 (2주 2일)
//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

//--------
int main()
//--------
{
	long long n;

	// 이름 붙인 변수 n이 있다면 이것의 정체를 언제나 다음 3가지 코드로 파악할 수 있다.
	
	std::cout << "n의 메모리 크기 - " << sizeof n << "\n"; // 유일하게 sizeof는 괄호 생략 표현이 가능
	std::cout << "n의 메모리 주소 - " << std::addressof(n) << "\n";
	std::cout << "n의 데이터 타입 - " << typeid(n).name() << "\n";

	save("메인.cpp");
}

=========================================
Save Time: 9/10/2025 6:27:58 PM Wednesday
=========================================

﻿//--------------------------------------------------------------------
// 2025. 3-2. 프로그래밍언어, 9월 10일 수요일 (2주 2일)
//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

//--------
int main()
//--------
{
	// [실습] 다른 type으로 바꿔 관찰
	char n;

	// 이름 붙인 변수 n이 있다면 이것의 정체를 언제나 다음 3가지 코드로 파악할 수 있다.
	
	std::cout << "n의 메모리 크기 - " << sizeof n << "\n"; // 유일하게 sizeof는 괄호 생략 표현이 가능
	std::cout << "n의 메모리 주소 - " << std::addressof(n) << "\n";
	std::cout << "n의 데이터 타입 - " << typeid(n).name() << "\n";

	save("메인.cpp");
}

=========================================
Save Time: 9/10/2025 6:28:10 PM Wednesday
=========================================

﻿//--------------------------------------------------------------------
// 2025. 3-2. 프로그래밍언어, 9월 10일 수요일 (2주 2일)
//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

//--------
int main()
//--------
{
	// [실습] 다른 type으로 바꿔 관찰
	char n;

	// 이름 붙인 변수 n이 있다면 이것의 정체를 언제나 다음 3가지 코드로 파악할 수 있다.
	
	std::cout << "n의 메모리 크기 - " << sizeof n << "\n"; // 유일하게 sizeof는 괄호 생략 표현이 가능
	std::cout << "n의 메모리 주소 - " << std::addressof(n) << "\n";
	std::cout << "n의 데이터 타입 - " << typeid(n).name() << "\n";

	save("메인.cpp");
}

=========================================
Save Time: 9/10/2025 6:28:48 PM Wednesday
=========================================

﻿//--------------------------------------------------------------------
// 2025. 3-2. 프로그래밍언어, 9월 10일 수요일 (2주 2일)
//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

//--------
int main()
//--------
{
	// [실습] 다른 type으로 바꿔 관찰
	bool n;

	// 이름 붙인 변수 n이 있다면 이것의 정체를 언제나 다음 3가지 코드로 파악할 수 있다.
	
	std::cout << "n의 메모리 크기 - " << sizeof n << "\n"; // 유일하게 sizeof는 괄호 생략 표현이 가능
	std::cout << "n의 메모리 주소 - " << std::addressof(n) << "\n";
	std::cout << "n의 데이터 타입 - " << typeid(n).name() << "\n";

	save("메인.cpp");
}

=========================================
Save Time: 9/10/2025 6:30:26 PM Wednesday
=========================================

﻿//--------------------------------------------------------------------
// 2025. 3-2. 프로그래밍언어, 9월 10일 수요일 (2주 2일)
//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

//--------
int main()
//--------
{
	// [실습] 다른 type으로 바꿔 관찰
	char n; 
	// 왜 얘만 메모리 주소가 깨지냐? 

	// 이름 붙인 변수 n이 있다면 이것의 정체를 언제나 다음 3가지 코드로 파악할 수 있다.
	
	std::cout << "n의 메모리 크기 - " << sizeof n << "\n"; // 유일하게 sizeof는 괄호 생략 표현이 가능
	std::cout << "n의 메모리 주소 - " << std::addressof(n) << "\n";
	std::cout << "n의 데이터 타입 - " << typeid(n).name() << "\n";

	save("메인.cpp");
}

=========================================
Save Time: 9/10/2025 6:31:53 PM Wednesday
=========================================

﻿//--------------------------------------------------------------------
// 2025. 3-2. 프로그래밍언어, 9월 10일 수요일 (2주 2일)
//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

//--------
int main()
//--------
{
	// [실습] 다른 type으로 바꿔 관찰
	char n; 
	// 왜 얘만 메모리 주소가 깨지냐? 

	// 이름 붙인 변수 n이 있다면 이것의 정체를 언제나 다음 3가지 코드로 파악할 수 있다.
	
	std::cout << "n의 메모리 크기 - " << sizeof n << "\n"; // 유일하게 sizeof는 괄호 생략 표현이 가능
	std::cout << "n의 메모리 주소 - " << (void*)std::addressof(n) << "\n";
	std::cout << "n의 데이터 타입 - " << typeid(n).name() << "\n";

	save("메인.cpp");
}

=========================================
Save Time: 9/10/2025 6:38:39 PM Wednesday
=========================================

﻿//--------------------------------------------------------------------
// 2025. 3-2. 프로그래밍언어, 9월 10일 수요일 (2주 2일)
//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

//--------
int main()
//--------
{
	// [실습] 다른 type으로 바꿔 관찰
	nullptr_t n;

	// 이름 붙인 변수 n이 있다면 이것의 정체를 언제나 다음 3가지 코드로 파악할 수 있다.
	
	std::cout << "n의 메모리 크기 - " << sizeof n << "\n"; // 유일하게 sizeof는 괄호 생략 표현이 가능
	std::cout << "n의 메모리 주소 - " << std::addressof(n) << "\n";
	std::cout << "n의 데이터 타입 - " << typeid(n).name() << "\n";

	save("메인.cpp");
}

=========================================
Save Time: 9/10/2025 6:39:17 PM Wednesday
=========================================

﻿//--------------------------------------------------------------------
// 2025. 3-2. 프로그래밍언어, 9월 10일 수요일 (2주 2일)
//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

//--------
int main()
//--------
{
	// [실습] 다른 type으로 바꿔 관찰
	unsigned long long int n;

	// 이름 붙인 변수 n이 있다면 이것의 정체를 언제나 다음 3가지 코드로 파악할 수 있다.
	
	std::cout << "n의 메모리 크기 - " << sizeof n << "\n"; // 유일하게 sizeof는 괄호 생략 표현이 가능
	std::cout << "n의 메모리 주소 - " << std::addressof(n) << "\n";
	std::cout << "n의 데이터 타입 - " << typeid(n).name() << "\n";

	save("메인.cpp");
}

=========================================
Save Time: 9/10/2025 6:41:05 PM Wednesday
=========================================

﻿//--------------------------------------------------------------------
// 2025. 3-2. 프로그래밍언어, 9월 10일 수요일 (2주 2일)
//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

class Player
{
	char name[1234];
	int hp{ 100 };
	int mp{ 50 };
	int exp{ 0 };
	int level{ 1 };
};

//--------
int main()
//--------
{
	// [실습] 다른 type으로 바꿔 관찰
	Player n;

	// 이름 붙인 변수 n이 있다면 이것의 정체를 언제나 다음 3가지 코드로 파악할 수 있다.
	
	std::cout << "n의 메모리 크기 - " << sizeof n << "\n"; // 유일하게 sizeof는 괄호 생략 표현이 가능
	std::cout << "n의 메모리 주소 - " << std::addressof(n) << "\n";
	std::cout << "n의 데이터 타입 - " << typeid(n).name() << "\n";

	save("메인.cpp");
}

=========================================
Save Time: 9/10/2025 6:42:30 PM Wednesday
=========================================

﻿//--------------------------------------------------------------------
// 2025. 3-2. 프로그래밍언어, 9월 10일 수요일 (2주 2일)
//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

//--------
int main()
//--------
{
	// [실습] 다른 type으로 바꿔 관찰
	char n;

	// 이름 붙인 변수 n이 있다면 이것의 정체를 언제나 다음 3가지 코드로 파악할 수 있다.
	
	std::cout << "n의 메모리 크기 - " << sizeof n << "\n"; // 유일하게 sizeof는 괄호 생략 표현이 가능
	std::cout << "n의 메모리 주소 - " << std::addressof(n) << "\n";
	std::cout << "n의 데이터 타입 - " << typeid(n).name() << "\n";

	save("메인.cpp");
}

=========================================
Save Time: 9/10/2025 6:42:42 PM Wednesday
=========================================

﻿//--------------------------------------------------------------------
// 2025. 3-2. 프로그래밍언어, 9월 10일 수요일 (2주 2일)
//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

//--------
int main()
//--------
{
	// [실습] 다른 type으로 바꿔 관찰
	char n{'F'};

	// 이름 붙인 변수 n이 있다면 이것의 정체를 언제나 다음 3가지 코드로 파악할 수 있다.
	
	std::cout << "n의 메모리 크기 - " << sizeof n << "\n"; // 유일하게 sizeof는 괄호 생략 표현이 가능
	std::cout << "n의 메모리 주소 - " << std::addressof(n) << "\n";
	std::cout << "n의 데이터 타입 - " << typeid(n).name() << "\n";

	save("메인.cpp");
}

=========================================
Save Time: 9/10/2025 6:43:14 PM Wednesday
=========================================

﻿//--------------------------------------------------------------------
// 2025. 3-2. 프로그래밍언어, 9월 10일 수요일 (2주 2일)
//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

//--------
int main()
//--------
{
	// [실습] 다른 type으로 바꿔 관찰
	char n{'7'};

	// 이름 붙인 변수 n이 있다면 이것의 정체를 언제나 다음 3가지 코드로 파악할 수 있다.
	
	std::cout << "n의 메모리 크기 - " << sizeof n << "\n"; // 유일하게 sizeof는 괄호 생략 표현이 가능
	std::cout << "n의 메모리 주소 - " << std::addressof(n) << "\n";
	std::cout << "n의 데이터 타입 - " << typeid(n).name() << "\n";

	save("메인.cpp");
}

=========================================
Save Time: 9/10/2025 6:43:33 PM Wednesday
=========================================

﻿//--------------------------------------------------------------------
// 2025. 3-2. 프로그래밍언어, 9월 10일 수요일 (2주 2일)
//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

//--------
int main()
//--------
{
	// [실습] 다른 type으로 바꿔 관찰
	char n{'!'};

	// 이름 붙인 변수 n이 있다면 이것의 정체를 언제나 다음 3가지 코드로 파악할 수 있다.
	
	std::cout << "n의 메모리 크기 - " << sizeof n << "\n"; // 유일하게 sizeof는 괄호 생략 표현이 가능
	std::cout << "n의 메모리 주소 - " << std::addressof(n) << "\n";
	std::cout << "n의 데이터 타입 - " << typeid(n).name() << "\n";

	save("메인.cpp");
}

=========================================
Save Time: 9/10/2025 6:46:38 PM Wednesday
=========================================

﻿//--------------------------------------------------------------------
// 2025. 3-2. 프로그래밍언어, 9월 10일 수요일 (2주 2일)
//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

//--------
int main()
//--------
{
	// [실습] 다른 type으로 바꿔 관찰
	char n{'!'};

	std::cout << "n의 메모리 크기 - " << sizeof n << "\n"; 
	std::cout << "n의 메모리 주소 - " << (int*)std::addressof(n) << "\n";
	std::cout << "n의 데이터 타입 - " << typeid(n).name() << "\n";

	save("메인.cpp");
}

=========================================
Save Time: 9/10/2025 6:46:46 PM Wednesday
=========================================

﻿//--------------------------------------------------------------------
// 2025. 3-2. 프로그래밍언어, 9월 10일 수요일 (2주 2일)
//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

//--------
int main()
//--------
{
	// [실습] 다른 type으로 바꿔 관찰
	char n{'!'};

	std::cout << "n의 메모리 크기 - " << sizeof n << "\n"; 
	std::cout << "n의 메모리 주소 - " << (void*)std::addressof(n) << "\n";
	std::cout << "n의 데이터 타입 - " << typeid(n).name() << "\n";

	save("메인.cpp");
}

=========================================
Save Time: 9/10/2025 6:48:32 PM Wednesday
=========================================

﻿//--------------------------------------------------------------------
// 2025. 3-2. 프로그래밍언어, 9월 10일 수요일 (2주 2일)
//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

//--------
int main()
//--------
{
	// [실습] 다른 type으로 바꿔 관찰
	char n{'!'};

	std::cout << "n의 메모리 크기 - " << sizeof n << "\n"; 
	std::cout << "n의 메모리 주소 - " << (void*)std::addressof(n) << "\n"; 
	// addressof()는 char n을 반환할 때 char*로 반환하기 때문에 void*로 형변환하여 std::cout을 속일 수 있다.
	// (std::cout은 char*를 출력할 때 문자열로 인식하기 때문)
	std::cout << "n의 데이터 타입 - " << typeid(n).name() << "\n";

	save("메인.cpp");
}

=========================================
Save Time: 9/10/2025 6:52:03 PM Wednesday
=========================================

﻿//--------------------------------------------------------------------
// 2025. 3-2. 프로그래밍언어, 9월 10일 수요일 (2주 2일)
//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

// [문제] int값 2개를 입력받아 합계를 알려주는 함수 add를 작성하라.
// 다음 main이 문제없이 실행되어야 한다.
int add(int a, int b)
{
	return a + b;
}

//--------
int main()
//--------
{
	std::cout << "합계를 알려줍니다" << '\n';
	std::cout << "int값 2개를 입력하세요: ";
	int a, b;
	std::cin >> a >> b;
	std::cout << a << " + " << b << " = " << add(a, b) << '\n';

	save("메인.cpp");
}

=========================================
Save Time: 9/10/2025 6:58:47 PM Wednesday
=========================================

﻿//--------------------------------------------------------------------
// 2025. 3-2. 프로그래밍언어, 9월 10일 수요일 (2주 2일)
//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

// [문제] int값 2개를 입력받아 합계를 알려주는 함수 add를 작성하라.
// 다음 main이 문제없이 실행되어야 한다.
int add(int a, int b)
{
	return a + b;
}

//--------
int main()
//--------
{
	std::cout << "합계를 알려줍니다" << '\n';
	std::cout << "int값 2개를 입력하세요: ";
	int a, b;
	std::cin >> a >> b;
	std::cout << a << " + " << b << " = " << add(a, b) << '\n';

	save("메인.cpp");
}

=========================================
Save Time: 9/10/2025 7:03:57 PM Wednesday
=========================================

﻿//--------------------------------------------------------------------
// 2025. 3-2. 프로그래밍언어, 9월 10일 수요일 (2주 2일)
//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

// [문제] int값 2개를 입력받아 합계를 알려주는 함수 add를 작성하라.
// 다음 main이 문제없이 실행되어야 한다.

// 함수 선언 - function declaration
int add(int, int);		
int add(int, int);		
int add(int, int);		
int add(int, int);		
int add(int, int);		// 선언은 중복해도 문제가 없다.

// 함수 정의 - function definition
// 정의에 있는 코드는 그대로 메모리에 로드된다.
int add(int num1, int num2)
{
	return num1 + num2;
}

//--------
int main()
//--------
{
	std::cout << "합계를 알려줍니다" << '\n';
	std::cout << "int값 2개를 입력하세요: ";
	int a, b;
	std::cin >> a >> b;

	std::cout << a << " + " << b << " = " << add(a, b) << '\n';

	save("메인.cpp");
}

=========================================
Save Time: 9/15/2025 5:39:07 PM Monday
=========================================

//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"


//--------
int main()
//--------
{
	int n[40];

	// [실습] 값을 출력해 보세요.

	std::cout << n[0] << std::endl;
	std::cout << n << std::endl;

	save("메인.cpp");
}

=========================================
Save Time: 9/15/2025 5:40:41 PM Monday
=========================================

//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"


//--------
int main()
//--------
{
	int n[40];

	// [실습] 값을 출력해 보세요.

	std::cout << n << '\n';

	for ( int a : n )
		std::cout << a << '\n';

	save("메인.cpp");
}

=========================================
Save Time: 9/15/2025 5:44:36 PM Monday
=========================================

//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"


//--------
int main()
//--------
{
	int n[40];

	// [실습] 값을 출력해 보세요.

	std::cout << n << '\n';

	for ( int i = 0; i < 40; ++i )
	{
		std::cout << n[i] << '\n';
	}

	save("메인.cpp");
}

=========================================
Save Time: 9/15/2025 5:51:37 PM Monday
=========================================

//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"


//--------
int main()
//--------
{
	int n[40] { };	// 요청한 메모리 공간의 값을 초기화 한다
					// {} -> initializer list
					// 자료형의 default value로 초기화
					// fundamental data type은 모든 bit를 0으로 만든다.

	// [실습] 값을 출력해 보세요.

	for ( int i = 0; i < 40; ++i )
	{
		std::cout << n[i] << " - ";
	}

	save("메인.cpp");
}



=========================================
Save Time: 9/15/2025 5:56:38 PM Monday
=========================================

//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"


//--------
int main()
//--------
{
	int a { 3 };
	// int a = 3;	// 이 문장도 초기화 문장(Statement)이다.
	
	a = 3;			// 대입문(Assignment Statement)
	a = 33;			// 대입, 할당, 배정 등으로 부른다.
	a = 333;		// -> "Assignment"

	int n[40] { 1, 2, 3 };	// 요청한 메모리 공간의 값을 초기화 한다
							// {} -> initializer list
							// 자료형의 default value로 초기화
							// fundamental data type은 모든 bit를 0으로 만든다.

	// [실습] 값을 출력해 보세요.

	for ( int i = 0; i < 40; ++i )
	{
		std::cout << n[i] << " - ";
	}

	save("메인.cpp");
}

=========================================
Save Time: 9/15/2025 6:02:47 PM Monday
=========================================

//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"


//--------
int main()
//--------
{
	int n[40] { };	

	// [실습] 값을 출력해 보세요.

	std::cout << "n의 메모리 크기 - " << sizeof n << "\n"; 
	std::cout << "n의 메모리 주소 - " << std::addressof(n) << "\n";
	std::cout << "n의 데이터 타입 - " << typeid(n).name() << "\n";

	save("메인.cpp");
}

=========================================
Save Time: 9/15/2025 6:05:41 PM Monday
=========================================

//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"


//--------
int main()
//--------
{
	int n[40] { };	

	// [실습] 값을 출력해 보세요.

	std::cout << "n의 메모리 크기 - " << sizeof n << "\n";				// 4 * 40 = 160
	std::cout << "n의 메모리 주소 - " << std::addressof(n) << "\n";		// 그냥 배열 시작 주소
	std::cout << "n의 데이터 타입 - " << typeid(n).name() << "\n";		// int [40]

	save("메인.cpp");
}

=========================================
Save Time: 9/15/2025 6:10:58 PM Monday
=========================================

//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"


//--------
int main()
//--------
{
	int n[40] { };	
	

	// [실습] 값을 출력해 보세요.

	std::cout << "main의 메모리 크기 - " << sizeof main() << "\n";			
	std::cout << "main의 메모리 주소 - " << std::addressof(main) << "\n";		
	std::cout << "main의 데이터 타입 - " << typeid(main).name() << "\n";		

	save("메인.cpp");
}

=========================================
Save Time: 9/15/2025 6:15:21 PM Monday
=========================================

//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"


//--------
int main()
//--------
{
	int n[40] { };

	for(int i = 0; i < 40; ++i) {
		std::cout << n[i] << "  ";
	}

	save("메인.cpp");
}

=========================================
Save Time: 9/15/2025 6:23:01 PM Monday
=========================================

//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"


//--------
int main()
//--------
{
	int n[40] { };

	for(int i = -10; i < 50; ++i) {
		if (i != 0 and i % 5 == 0) std::cout << "\n";
		
		std::cout << n[i] << "  ";
	}

	save("메인.cpp");
}

=========================================
Save Time: 9/15/2025 6:47:06 PM Monday
=========================================

//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include <random>
#include <print>
#include <algorithm>
#include "save.h"

// [문제] int값 1000개를 저장할 메모리를 확보하라.
// 각 int값을 random값으로(니멋대로, 임의의 값으로) 채워라.
// 가장 큰 값을 찾아 화면에 출력하라.

std::default_random_engine dre;
std::uniform_int_distribution uid { 0, 9999'9999 };

//--------
int main()
//--------
{
	int n[1'000];
	for (int& val : n) {	// range-based for, range-for 루프
		val = uid(dre);
	}
	
	// 줄 맞춰 출력한다. 숫자 하나당 10칸
	for (int& val : n) {
		std::print("{:10}", val);
	}
	std::cout << '\n';

	// 가장 큰 값을 찾아 출력한다.
	for (int i = 0; i < 1'000; ++i) {
		for (int j = i + 1; j < 1'000; ++j) {
			if (n[i] < n[j]) {
				std::swap(n[i], n[j]);
			}
		}
	}
	std::print("가장 큰 값은 {}입니다.\n", n[0]);

	save("메인.cpp");
}

=========================================
Save Time: 9/15/2025 6:56:00 PM Monday
=========================================

//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include <random>
#include <print>
#include "save.h"

// [문제] int값 1000개를 저장할 메모리를 확보하라.
// 각 int값을 random값으로(니멋대로, 임의의 값으로) 채워라.
// 가장 큰 값을 찾아 화면에 출력하라.

std::default_random_engine dre;
std::uniform_int_distribution uid { 0, 9999'9999 };

//--------
int main()
//--------
{
	int n[1'000];
	for (int& val : n) {	// range-based for, range-for 루프
		val = uid(dre);
	}
	
	// 줄 맞춰 출력한다. 숫자 하나당 10칸
	for (int val : n) {
		std::print("{:10}", val);
	}
	std::cout << '\n';

	// 가장 큰 값을 찾아 출력한다.
	int maxVal = std::numeric_limits<int>::min();
	for (int val : n) {			// 복잡도 - O(n)
		if (maxVal < val) {
			maxVal = val;
		}
	}
	std::print("가장 큰 값 - {}\n", maxVal);

	save("메인.cpp");
}

=========================================
Save Time: 9/15/2025 7:00:59 PM Monday
=========================================

//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include <random>
#include <print>
#include "save.h"

// [문제] int값 1000개를 저장할 메모리를 확보하라.
// 각 int값을 random값으로(니멋대로, 임의의 값으로) 채워라.
// 가장 큰 값을 찾아 화면에 출력하라.

std::default_random_engine dre { std::random_device()() };
std::uniform_int_distribution uid { 0, 9999'9999 };

//--------
int main()
//--------
{
	int n[1'000];
	for (int& val : n) {	// range-based for, range-for 루프
		val = uid(dre);
	}
	
	// 줄 맞춰 출력한다. 숫자 하나당 10칸
	for (int val : n) {
		std::print("{:10}", val);
	}
	std::cout << '\n';

	// 가장 큰 값을 찾아 출력한다.
	int maxVal = std::numeric_limits<int>::min();
	for (int val : n) {			// 복잡도 - O(n)
		if (maxVal < val) {
			maxVal = val;
		}
	}
	std::print("가장 큰 값 - {}\n", maxVal);

	save("메인.cpp");
}

=========================================
Save Time: 9/16/2025 2:30:46 PM Tuesday
=========================================

//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include <random>
#include <print>
#include "save.h"

// [문제] int값 1000개를 저장할 메모리를 확보하라.
// 각 int값을 random값으로(니멋대로, 임의의 값으로) 채워라.
// 가장 큰 값을 찾아 화면에 출력하라.
// 배열의 몇 번째 원소(element)인가도 같이 출력하라.

std::default_random_engine dre { std::random_device()() };
std::uniform_int_distribution uid { 0, 9999'9999 };

//--------
int main()
//--------
{
	int n[1'000];
	for (int& val : n) {	// range-based for, range-for 루프
		val = uid(dre);
	}
	
	// 줄 맞춰 출력한다. 숫자 하나당 10칸
	for (int val : n) {
		std::print("{:10}", val);
	}
	std::cout << '\n';

	// 가장 큰 값을 찾아 출력한다.
	int maxVal = std::numeric_limits<int>::min();
	int where = -1;
	for (int i = 0; i < 1'000; ++i) {		// 복잡도 - O(n)
		if (maxVal < n[i]) {
			maxVal = n[i];
			where = i;
		}
	}
	std::print("가장 큰 값 - {}\n", maxVal);
	std::print("{} 번째 원소(인덱스)\n", where);

	save("메인.cpp");
}

=========================================
Save Time: 9/16/2025 2:32:25 PM Tuesday
=========================================

//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include <random>
#include <print>
#include "save.h"

// [문제] int값 1000개를 저장할 메모리를 확보하라.
// 각 int값을 random값으로(니멋대로, 임의의 값으로) 채워라.
// 가장 큰 값을 찾아 화면에 출력하라.
// 배열의 몇 번째 원소(element)인가도 같이 출력하라.

std::default_random_engine dre { std::random_device()() };
std::uniform_int_distribution uid { 0, 9999'9999 };

//--------
int main()
//--------
{
	int n[1'000];
	for (int& val : n) {	// range-based for, range-for 루프
		val = uid(dre);
	}
	
	// 줄 맞춰 출력한다. 숫자 하나당 10칸
	for (int i = 0; i < 1'000; ++i) {
		std::print("{:4} - {:10}", i, n[i]);
	}
	std::cout << '\n';

	// 가장 큰 값을 찾아 출력한다.
	int maxVal = std::numeric_limits<int>::min();
	int where = -1;
	for (int i = 0; i < 1'000; ++i) {		// 복잡도 - O(n)
		if (maxVal < n[i]) {
			maxVal = n[i];
			where = i;
		}
	}
	std::print("가장 큰 값 - {}\n", maxVal);
	std::print("{} 번째 원소(인덱스)\n", where);

	save("메인.cpp");
}

=========================================
Save Time: 9/16/2025 2:32:42 PM Tuesday
=========================================

//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include <random>
#include <print>
#include "save.h"

// [문제] int값 1000개를 저장할 메모리를 확보하라.
// 각 int값을 random값으로(니멋대로, 임의의 값으로) 채워라.
// 가장 큰 값을 찾아 화면에 출력하라.
// 배열의 몇 번째 원소(element)인가도 같이 출력하라.

std::default_random_engine dre { std::random_device()() };
std::uniform_int_distribution uid { 0, 9999'9999 };

//--------
int main()
//--------
{
	int n[1'000];
	for (int& val : n) {	// range-based for, range-for 루프
		val = uid(dre);
	}
	
	// 줄 맞춰 출력한다. 숫자 하나당 10칸
	for (int i = 0; i < 1'000; ++i) {
		std::print("[{:4} - {:10}]", i, n[i]);
	}
	std::cout << '\n';

	// 가장 큰 값을 찾아 출력한다.
	int maxVal = std::numeric_limits<int>::min();
	int where = -1;
	for (int i = 0; i < 1'000; ++i) {		// 복잡도 - O(n)
		if (maxVal < n[i]) {
			maxVal = n[i];
			where = i;
		}
	}
	std::print("가장 큰 값 - {}\n", maxVal);
	std::print("{} 번째 원소(인덱스)\n", where);

	save("메인.cpp");
}

=========================================
Save Time: 9/17/2025 5:57:08 PM Wednesday
=========================================

//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include <random>
#include <print>
#include "save.h"

// [문제] int값 1000개를 저장할 메모리를 확보하라.
// 각 int값을 random값으로(니멋대로, 임의의 값으로) 채워라.
// 가장 큰 값을 찾아 화면에 출력하라.
// 배열의 몇 번째 원소(element)인가도 같이 출력하라.

std::default_random_engine dre { std::random_device()() };
std::uniform_int_distribution uid { 0, 9999'9999 };

//--------
int main()
//--------
{
	const int TestSize = 1'000;

	int n[TestSize];

	for (int& val : n) {	// range-based for, range-for 루프
		val = uid(dre);
	}
	
	// 줄 맞춰 출력한다. 숫자 하나당 10칸
	for (int i = 0; i < TestSize; ++i) {
		std::print("[{:3}, {:8}] ", i, n[i]);
	}
	std::cout << '\n';

	// 가장 큰 값을 찾아 출력한다.
	int maxVal = std::numeric_limits<int>::min();
	int where = -1;
	for (int i = 0; i < TestSize; ++i) {		// 복잡도 - O(n)
		if (maxVal < n[i]) {
			maxVal = n[i];
			where = i;
		}
	}
	std::print("가장 큰 값 - {}\n", maxVal);
	std::print("{} 번째 원소(인덱스)\n", where);

	save("메인.cpp");
}

=========================================
Save Time: 9/17/2025 6:00:44 PM Wednesday
=========================================

//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include <random>
#include <print>
#include "save.h"

// [문제] int값 1000개를 저장할 메모리를 확보하라.
// 각 int값을 random값으로(니멋대로, 임의의 값으로) 채워라.
// 가장 큰 값을 찾아 화면에 출력하라.
// 배열의 몇 번째 원소(element)인가도 같이 출력하라.

std::default_random_engine dre { std::random_device()() };
std::uniform_int_distribution uid { 0, 9999'9999 };

//--------
int main()
//--------
{
	const int TestSize = 1'00;

	int n[TestSize];

	for (int& val : n) {	// range-based for, range-for 루프
		val = uid(dre);
	}
	
	// 줄 맞춰 출력한다. 숫자 하나당 10칸
	for (int i = 0; i < TestSize; ++i) {
		std::print("[{:3}, {:8}] ", i, n[i]);
	}
	std::cout << '\n';

	// 가장 큰 값을 찾아 출력한다.
	int maxVal = std::numeric_limits<int>::min();
	int where = -1;
	for (int i = 0; i < TestSize; ++i) {		// 복잡도 - O(n)
		if (maxVal < n[i]) {
			maxVal = n[i];
			where = i;
		}
	}
	std::print("가장 큰 값 - {}\n", maxVal);
	std::print("{} 번째 원소(인덱스)\n", where);

	save("메인.cpp");
}

=========================================
Save Time: 9/17/2025 6:03:26 PM Wednesday
=========================================

//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include <random>
#include <print>
#include "save.h"

// [문제] int값 1000개를 저장할 메모리를 확보하라.
// 각 int값을 random값으로(니멋대로, 임의의 값으로) 채워라.
// 가장 큰 값을 찾아 화면에 출력하라.
// 배열의 몇 번째 원소(element)인가도 같이 출력하라.

std::default_random_engine dre { std::random_device()() };
std::uniform_int_distribution uid { 0, 9999'9999 };

//--------
int main()
//--------
{
	const int TestSize = 1'00;

	int n[TestSize];	// int[100] 등의 배열은 C++ 언어에서 앞으로는 사용하지 않아야 할 자료구조이다.
						// 이유는 보안 문제, 메모리 누수 문제, 복사 문제, 크기 변경 불가 문제 등등이 있다.

	for (int& val : n) {	// range-based for, range-for 루프
		val = uid(dre);
	}
	
	// 줄 맞춰 출력한다. 숫자 하나당 10칸
	for (int i = 0; i < TestSize; ++i) {
		std::print("[{:3}, {:8}] ", i, n[i]);
	}
	std::cout << '\n';

	// 가장 큰 값을 찾아 출력한다.
	int maxVal = std::numeric_limits<int>::min();
	int where = -1;
	for (int i = 0; i < TestSize; ++i) {		// 복잡도 - O(n)
		if (maxVal < n[i]) {
			maxVal = n[i];
			where = i;
		}
	}
	std::print("가장 큰 값 - {}\n", maxVal);
	std::print("{} 번째 원소(인덱스)\n", where);

	save("메인.cpp");
}

=========================================
Save Time: 9/17/2025 6:04:35 PM Wednesday
=========================================

//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include <random>
#include <print>
#include <array>
#include "save.h"

// [문제] int값 1000개를 저장할 메모리를 확보하라.
// 각 int값을 random값으로(니멋대로, 임의의 값으로) 채워라.
// 가장 큰 값을 찾아 화면에 출력하라.
// 배열의 몇 번째 원소(element)인가도 같이 출력하라.

std::default_random_engine dre { std::random_device()() };
std::uniform_int_distribution uid { 0, 9999'9999 };

//--------
int main()
//--------
{
	const int TestSize = 1'00;

	//int n[TestSize];	// int[100] 등의 배열은 C++ 언어에서 앞으로는 사용하지 않아야 할 자료구조이다.
						// 이유는 보안 문제, 메모리 누수 문제, 복사 문제, 크기 변경 불가 문제 등등이 있다.

	std::array<int, TestSize> n; // int[TestSize]를 완벽하게 대체하면서도 기능이 많다.

	for (int& val : n) {	// range-based for, range-for 루프
		val = uid(dre);
	}
	
	// 줄 맞춰 출력한다. 숫자 하나당 10칸
	for (int i = 0; i < TestSize; ++i) {
		std::print("[{:3}, {:8}] ", i, n[i]);
	}
	std::cout << '\n';

	// 가장 큰 값을 찾아 출력한다.
	int maxVal = std::numeric_limits<int>::min();
	int where = -1;
	for (int i = 0; i < TestSize; ++i) {		// 복잡도 - O(n)
		if (maxVal < n[i]) {
			maxVal = n[i];
			where = i;
		}
	}
	std::print("가장 큰 값 - {}\n", maxVal);
	std::print("{} 번째 원소(인덱스)\n", where);

	save("메인.cpp");
}

=========================================
Save Time: 9/17/2025 6:09:05 PM Wednesday
=========================================

//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include <random>
#include <print>
#include "save.h"

std::default_random_engine dre { std::random_device()() };
std::uniform_int_distribution uid { 0, 1'000 };

//--------
int main()
//--------
{
	const int TestSize = 10'000;

	int n[TestSize];

	for (int& val : n) {	// range-based for, range-for 루프
		val = uid(dre);
	}

	std::cout << "전체 값 출력" << '\n';
	
	// 줄 맞춰 출력한다. 숫자 하나당 10칸
	for (int i = 0; i < TestSize; ++i) {
		std::print("[{:8}] ", n[i]);
	}
	std::cout << '\n';

	save("메인.cpp");
}

=========================================
Save Time: 9/17/2025 6:10:53 PM Wednesday
=========================================

//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include <random>
#include <print>
#include "save.h"

std::default_random_engine dre { std::random_device()() };
std::uniform_int_distribution uid { 0, 1'000 };

//--------
int main()
//--------
{
	const int TestSize = 10'000;

	int n[TestSize];

	for (int& val : n) {	// range-based for, range-for 루프
		val = uid(dre);
	}

	std::cout << "전체 값 출력" << '\n';
	
	// 줄 맞춰 출력한다. 숫자 하나당 10칸
	for (int i = 0; i < TestSize; ++i) {
		std::print("[{:8}] ", n[i]);
	}
	std::cout << '\n';

	save("메인.cpp");
}

=========================================
Save Time: 9/17/2025 6:15:53 PM Wednesday
=========================================

//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include <random>
#include <print>
#include "save.h"

std::default_random_engine dre { std::random_device()() };
std::uniform_int_distribution uid { 0, 1'000 };

//--------
int main()
//--------
{
	const int TestSize = 100;

	int n[TestSize];

	for (int& val : n) {	// range-based for, range-for 루프
		val = uid(dre);
	}

	std::cout << "전체 값 출력" << '\n';
	
	// 줄 맞춰 출력한다. 숫자 하나당 10칸
	for (int i = 0; i < TestSize; ++i) {
		std::print("[{:8}] ", n[i]);
	}
	std::cout << '\n';

	// [문제] 사용자가 찾기를 원하는 int 값을 입력받아
	// 있으면 있다, 없으면 없다 라고 출력하는 코드를 작성하시오.

	int findNum;
	std::cout << "찾을 값을 입력하세요: ";
	std::cin >> findNum;
	bool IsFound = false;
	for (int i = 0; i < TestSize; ++i) {
		if (n[i] == findNum) {
			IsFound = true;
			break;
		}
	}

	if (IsFound) {
		std::cout << findNum << "는(은) 있습니다.\n";
	}
	else {
		std::cout << findNum << "는(은) 없습니다.\n";
	}

	save("메인.cpp");
}

=========================================
Save Time: 9/17/2025 6:16:00 PM Wednesday
=========================================

//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include <random>
#include <print>
#include "save.h"

std::default_random_engine dre { std::random_device()() };
std::uniform_int_distribution uid { 0, 1'000 };

//--------
int main()
//--------
{
	const int TestSize = 100;

	int n[TestSize];

	for (int& val : n) {	// range-based for, range-for 루프
		val = uid(dre);
	}

	std::cout << "전체 값 출력" << '\n';
	
	// 줄 맞춰 출력한다. 숫자 하나당 10칸
	for (int i = 0; i < TestSize; ++i) {
		std::print("[{:8}] ", n[i]);
	}
	std::cout << '\n';

	// [문제] 사용자가 찾기를 원하는 int 값을 입력받아
	// 있으면 있다, 없으면 없다 라고 출력하는 코드를 작성하시오.

	int findNum;
	std::cout << "찾을 값을 입력하세요: ";
	std::cin >> findNum;
	bool IsFound = false;
	for (int i = 0; i < TestSize; ++i) {
		if (n[i] == findNum) {
			IsFound = true;
			break;
		}
	}

	if (IsFound) {
		std::cout << findNum << "는(은) 있습니다.\n";
	}
	else {
		std::cout << findNum << "는(은) 없습니다.\n";
	}

	save("메인.cpp");
}

=========================================
Save Time: 9/17/2025 6:17:45 PM Wednesday
=========================================

//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include <random>
#include <print>
#include "save.h"

std::default_random_engine dre { std::random_device()() };
std::uniform_int_distribution uid { 0, 1'000 };
const int TestSize = 100;

void findValue(int n[]) {
	int findNum;
	std::cout << "찾을 값을 입력하세요: ";
	std::cin >> findNum;
	bool IsFound = false;
	for (int i = 0; i < TestSize; ++i) {
		if (n[i] == findNum) {
			IsFound = true;
			break;
		}
	}

	if (IsFound) {
		std::cout << findNum << "는(은) 있습니다.\n";
	} else {
		std::cout << findNum << "는(은) 없습니다.\n";
	}
}

//--------
int main()
//--------
{
	int n[TestSize];

	for (int& val : n) {	// range-based for, range-for 루프
		val = uid(dre);
	}

	std::cout << "전체 값 출력" << '\n';
	
	// 줄 맞춰 출력한다. 숫자 하나당 10칸
	for (int i = 0; i < TestSize; ++i) {
		std::print("[{:8}] ", n[i]);
	}
	std::cout << '\n';

	// [문제] 사용자가 찾기를 원하는 int 값을 입력받아
	// 있으면 있다, 없으면 없다 라고 출력하는 코드를 작성하시오.

	findValue(n);

	save("메인.cpp");
}

=========================================
Save Time: 9/17/2025 6:18:55 PM Wednesday
=========================================

//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include <random>
#include <print>
#include "save.h"

std::default_random_engine dre { std::random_device()() };
std::uniform_int_distribution uid { 0, 1'000 };
const int TestSize = 100;

void findValue(int n[]) {
	int findNum;
	std::cout << "찾을 값을 입력하세요: ";
	std::cin >> findNum;
	bool IsFound = false;
	for (int i = 0; i < TestSize; ++i) {
		if (n[i] == findNum) {
			IsFound = true;
			break;
		}
	}

	if (IsFound) {
		std::cout << findNum << "는(은) 있습니다.\n";
	} else {
		std::cout << findNum << "는(은) 없습니다.\n";
	}
}

//--------
int main()
//--------
{
	int n[TestSize];

	for (int& val : n) {	// range-based for, range-for 루프
		val = uid(dre);
	}

	std::cout << "전체 값 출력" << '\n';
	
	// 줄 맞춰 출력한다. 숫자 하나당 10칸
	for (int i = 0; i < TestSize; ++i) {
		std::print("[{:8}] ", n[i]);
	}
	std::cout << '\n';

	// [문제] 사용자가 찾기를 원하는 int 값을 입력받아
	// 있으면 있다, 없으면 없다 라고 출력하는 코드를 작성하시오.

	while (true) {
		findValue(n);

		std::cout << "계속 하시겠습니까? (1: 예, 0: 아니오): ";
		int cont;
		std::cin >> cont;
		if (cont == 0) break;
	}
	
	save("메인.cpp");
}

=========================================
Save Time: 9/17/2025 6:30:12 PM Wednesday
=========================================

//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include <random>
#include <print>
#include "save.h"

std::default_random_engine dre { std::random_device()() };
std::uniform_int_distribution uid { 0, 1'000 };
const int TestSize = 100;

void findValue(int n[]) {
	int findNum;
	std::cout << "찾을 값을 입력하세요: ";
	std::cin >> findNum;
	bool flag { false }; // 초기화 방식이 아직 안 익숙하네
	for (int i = 0; i < TestSize; ++i) {
		if (n[i] == findNum) {
			flag = true;
			break;
		}
	}

	if (flag) {
		std::cout << findNum << "는(은) 있습니다.\n";
	} else {
		std::cout << findNum << "는(은) 없습니다.\n";
	}
}

//--------
int main()
//--------
{
	int n[TestSize];

	for (int& val : n) {	// range-based for, range-for 루프
		val = uid(dre);
	}

	std::cout << "전체 값 출력" << '\n';
	
	// 줄 맞춰 출력한다. 숫자 하나당 10칸
	for (int i = 0; i < TestSize; ++i) {
		std::print("[{:8}] ", n[i]);
	}
	std::cout << '\n';

	// [문제] 사용자가 찾기를 원하는 int 값을 입력받아
	// 있으면 있다, 없으면 없다 라고 출력하는 코드를 작성하시오.

	while (true) {
		findValue(n);

		std::cout << "계속 하시겠습니까? (1: 예, 0: 아니오): ";
		int cont;
		std::cin >> cont;
		if (cont == 0) break;
	}
	
	save("메인.cpp");
}

=========================================
Save Time: 9/17/2025 6:40:20 PM Wednesday
=========================================

﻿//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include <random>
#include <print>
#include "save.h"

std::default_random_engine dre { std::random_device()() };
std::uniform_int_distribution uid { 1, 6 };

const int TestSize = 100'0000;

// [문제] 주사위를 100만번 던졌다.
// 각 숫자가 나온 횟수(확률)을 계산해서 화면에 출력하라.

//--------
int main()
//--------
{
	int counts[6] = {}; // 0~5 인덱스
	for (int i = 0; i < TestSize; ++i) {
		++counts[uid(dre) - 1];
	}
	for (int i = 0; i < 6; ++i) {
		std::print("{} : {}번 ({:.2f}%)\n", i + 1, counts[i], counts[i] * 100.0 / TestSize);
	}
	
	save("메인.cpp");
}

=========================================
Save Time: 9/17/2025 6:59:45 PM Wednesday
=========================================

﻿//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include <random>
#include <print>
#include "save.h"

std::default_random_engine dre { std::random_device()() };
std::uniform_int_distribution uid { 1, 6 };

const int TestSize = 100'0000;

// [문제] 주사위를 100만번 던졌다.
// 각 숫자가 나온 횟수(확률)을 계산해서 화면에 출력하라.

//--------
int main()
//--------
{
	// 1학년용

	int num1 {};
	int num2 {};
	int num3 {};
	int num4 {};
	int num5 {};
	int num6 {};

	for (int i = 0; i < TestSize; ++i) {
		int 주사위값 = uid(dre);

		if (주사위값 == 1)
			++num1; // ++ ++ ++ num1; 이면 3이 증가.
		if (주사위값 == 2)
			++num2;
		if (주사위값 == 3)
			++num3;
		if (주사위값 == 4)
			++num4;
		if (주사위값 == 5)
			++num5;
		if (주사위값 == 6)
			++num6;
	}

	std::print("1 : {}번 ({:.2f}%)\n", num1, num1 * 100.0 / TestSize);
	std::print("2 : {}번 ({:.2f}%)\n", num2, num2 * 100.0 / TestSize);
	std::print("3 : {}번 ({:.2f}%)\n", num3, num3 * 100.0 / TestSize);
	std::print("4 : {}번 ({:.2f}%)\n", num4, num4 * 100.0 / TestSize);
	std::print("5 : {}번 ({:.2f}%)\n", num5, num5 * 100.0 / TestSize);
	std::print("6 : {}번 ({:.2f}%)\n", num6, num6 * 100.0 / TestSize);
	
	save("메인.cpp");
}

=========================================
Save Time: 9/17/2025 7:04:32 PM Wednesday
=========================================

﻿//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include <random>
#include <print>
#include "save.h"

std::default_random_engine dre { std::random_device()() };
std::uniform_int_distribution uid { 1, 6 };

const int TestSize = 100'0000;

// [문제] 주사위를 100만번 던졌다.
// 각 숫자가 나온 횟수(확률)을 계산해서 화면에 출력하라.

//--------
int main()
//--------
{
	// 교수님의 정답

	int num[6] {};

	for (int i = 0; i < TestSize; ++i) {
		++num[uid(dre) - 1];
	}
	for (int i = 0; i < 6; ++i) {
		std::println(" {} : {}번 (확률 - {:.2f}%)", i + 1, num[i], num[i] * 100.0 / TestSize);
	}
	
	save("메인.cpp");
}

=========================================
Save Time: 9/22/2025 5:28:10 PM Monday
=========================================

﻿//--------------------------------------------------------------------
// 변수와 메모리
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

//--------
int main()
//--------
{
	
	save("메인.cpp");
}

=========================================
Save Time: 9/22/2025 5:36:25 PM Monday
=========================================

﻿//--------------------------------------------------------------------
// 변수와 메모리
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

//--------
int main()
//--------
{
	int n; 

	/*
		ctrl + F5 -> 이름.exe 파일이 폴더에 생성됨 -> 실행(메모리 할당)

		 <메모리>
		|---------------| Low
		| STACK			| <---------- 지역변수 n 저장됨
		|---------------|
		| Free-Store	| <---------- 어떻게 사용? (new, delete)
		|---------------|
		| DATA			| <---------- 전역변수, static 변수 저장됨
		|---------------|
		| TEXT			| <---------- 프로그램 코드 (ex Main 함수) 저장됨
		|---------------| High

	*/

	save("메인.cpp");
}

=========================================
Save Time: 9/22/2025 5:57:27 PM Monday
=========================================

﻿//--------------------------------------------------------------------
// 변수와 메모리
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

// [문제] 지역이란? 
// -> 전역이 아닌 곳에서 만들어진 모든 변수

//--------
int main(int a1)		// 매개변수 a1 -> 지역변수 
//--------
{
	int n[1'000]; // 4KB

	std::cout << "이 정도는 끄떡없다" << '\n';

	save("메인.cpp");
}

=========================================
Save Time: 9/22/2025 5:58:17 PM Monday
=========================================

﻿//--------------------------------------------------------------------
// 변수와 메모리
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

// [문제] 지역이란? 
// -> 전역이 아닌 곳에서 만들어진 모든 변수

//--------
int main(int a1)		// 매개변수 a1 -> 지역변수 
//--------
{
	int n[250 * 1000]; // 1MB 근접

	std::cout << "이 정도는 끄떡없다" << '\n';

	save("메인.cpp");
}


=========================================
Save Time: 9/22/2025 6:00:15 PM Monday
=========================================

﻿//--------------------------------------------------------------------
// 변수와 메모리
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

// [문제] 지역이란? 
// -> 전역이 아닌 곳에서 만들어진 모든 변수

//--------
int main()		
//--------
{
	int n[10'000'000];  // 40MB

	std::cout << "이 정도는 끄떡없다" << '\n';

	save("메인.cpp");
}

=========================================
Save Time: 9/22/2025 6:02:04 PM Monday
=========================================

﻿//--------------------------------------------------------------------
// 변수와 메모리
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

// [문제] 지역이란? 
// -> 전역이 아닌 곳에서 만들어진 모든 변수

//--------
int main()		
//--------
{
	int n[500'000'000]; // 2GB

	std::cout << "이 정도는 끄떡없다" << '\n';

	save("메인.cpp");
}

=========================================
Save Time: 9/22/2025 6:04:07 PM Monday
=========================================

﻿//--------------------------------------------------------------------
// 변수와 메모리
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

// [문제] 지역이란? 
// -> 전역이 아닌 곳에서 만들어진 모든 변수
// STACK의 전체 크기는 2GB도 끄떡없더라
// 왜 1MB로 알려졌을까?

//--------
int main()		
//--------
{
	int n[500'000'000]; // 2GB

	std::cout << "이 정도는 끄떡없다" << '\n';

	save("메인.cpp");
}

=========================================
Save Time: 9/22/2025 6:05:51 PM Monday
=========================================

﻿//--------------------------------------------------------------------
// 변수와 메모리
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

// [문제] 프로그램 실행 중에 STACK을 넘치게 해보세요.

//--------
int main()		
//--------
{
	int n[500'000'000] {};
	std::cout << "문제 없다" << std::endl;

	save("메인.cpp");
}

=========================================
Save Time: 9/22/2025 6:09:19 PM Monday
=========================================

﻿//--------------------------------------------------------------------
// 변수와 메모리
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

// [문제] 프로그램 실행 중에 STACK을 넘치게 해보세요.

void recursive_call()
{
    // 종료 조건이 없는 재귀 함수
    recursive_call();
}

//--------
int main()		
//--------
{
    save("메인.cpp");

    // 스택 오버플로우를 유도하는 코드
    recursive_call();
    
    std::cout << "이 메시지는 보이지 않습니다." << '\n';

	//save("메인.cpp");
}

=========================================
Save Time: 9/22/2025 6:24:40 PM Monday
=========================================

﻿//--------------------------------------------------------------------
// 변수와 메모리
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

// [문제] 프로그램 실행 중에 STACK을 넘치게 해보세요. -> recursive function call

int cnt { 0 };
void f()
{
	int a[100'000'000] {}; // 더 빨리 죽게

	std::cout << "f 호출 횟수 - " << ++cnt << "\n";

	f(); // 재귀호출 - recursive call
}

//--------
int main()		
//--------
{
	save("메인.cpp");
	f();

	//save("메인.cpp");
}

=========================================
Save Time: 9/22/2025 6:25:59 PM Monday
=========================================

﻿//--------------------------------------------------------------------
// 변수와 메모리
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

// [문제] 프로그램 실행 중에 STACK을 넘치게 해보세요. -> recursive function call

int cnt { 0 };
void f()
{
	int a[50'000'000]; // 200MB

	std::cout << "f 호출 횟수 - " << ++cnt << "\n";

	f(); // 재귀호출 - recursive call
}

//--------
int main()		
//--------
{
	save("메인.cpp");
	f();

	//save("메인.cpp");
}

=========================================
Save Time: 9/22/2025 6:27:05 PM Monday
=========================================

﻿//--------------------------------------------------------------------
// 변수와 메모리
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

// [문제] 프로그램 실행 중에 STACK을 넘치게 해보세요. -> recursive function call

int cnt { 0 };

int f();

int f()
{
	int a[50'000'000]; // 200MB

	std::cout << "f 호출 횟수 - " << ++cnt << "\n";

	f(); // 재귀호출 - recursive call

	return 20250922;
}

//--------
int main()		
//--------
{
	save("메인.cpp");
	f();
	//  -1073741571 사망
	//save("메인.cpp");
}

=========================================
Save Time: 9/22/2025 6:31:13 PM Monday
=========================================

﻿//--------------------------------------------------------------------
// 변수와 메모리
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

// [문제] 프로그램 실행 중에 STACK을 넘치게 해보세요. -> recursive function call

int cnt { 0 };

int f();

int f()
{
	int n[10'000] { 20250922 }; // 40KB

	std::cout << "f 호출 횟수 - " << ++cnt << ", -> " << n[0] << "\n";

	f(); // 재귀호출 - recursive call

	return 20250922;
}

//--------
int main()		
//--------
{
	save("메인.cpp");
	f();

	//save("메인.cpp");
}

=========================================
Save Time: 9/22/2025 6:31:44 PM Monday
=========================================

﻿//--------------------------------------------------------------------
// 변수와 메모리
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

// [문제] 프로그램 실행 중에 STACK을 넘치게 해보세요. -> recursive function call

int cnt { 0 };

int f();

int f()
{
	int n[10'000]; // 40KB

	std::cout << "f 호출 횟수 - " << ++cnt << ", -> " << n[0] << "\n";

	f(); // 재귀호출 - recursive call

	return 20250922;
}

//--------
int main()		
//--------
{
	save("메인.cpp");
	f();

	//save("메인.cpp");
}

=========================================
Save Time: 9/22/2025 6:33:30 PM Monday
=========================================

﻿//--------------------------------------------------------------------
// 변수와 메모리
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

// [문제] 프로그램 실행 중에 STACK을 넘치게 해보세요. -> recursive function call

int cnt { 0 };

int f();

int f()
{
	int n[250'000] { 20250922 }; // 1MB

	std::cout << "f 호출 횟수 - " << ++cnt << ", -> " << n[0] << "\n";

	f(); // 재귀호출 - recursive call

	return 20250922;
}

//--------
int main()		
//--------
{
	save("메인.cpp");
	f();

	//save("메인.cpp");
}

=========================================
Save Time: 9/22/2025 6:36:13 PM Monday
=========================================

﻿//--------------------------------------------------------------------
// 변수와 메모리
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

// [문제] 전역 메모리의 한계는 어디까지?
char c[1'000'000]; // 1MB

//--------
int main()		
//--------
{
	std::cout << "c의 크기 - " << sizeof c << '\n';

	save("메인.cpp");
}

=========================================
Save Time: 9/22/2025 6:37:34 PM Monday
=========================================

﻿//--------------------------------------------------------------------
// 변수와 메모리
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

// [문제] 전역 메모리의 한계는 어디까지?
char c[1'000'000 * 1000]; // 1000MB

//--------
int main()		
//--------
{
	std::cout << "c의 크기 - " << sizeof c << '\n';

	save("메인.cpp");
}

=========================================
Save Time: 9/22/2025 6:37:58 PM Monday
=========================================

﻿//--------------------------------------------------------------------
// 변수와 메모리
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

// [문제] 전역 메모리의 한계는 어디까지?
char c[1'000'000 * 2000]; // 2000MB

//--------
int main()		
//--------
{
	std::cout << "c의 크기 - " << sizeof c << '\n';

	save("메인.cpp");
}

=========================================
Save Time: 9/22/2025 6:39:16 PM Monday
=========================================

﻿//--------------------------------------------------------------------
// 변수와 메모리
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

// [문제] 전역 메모리의 한계는 어디까지?
char c[2'100'000'000]; // 2.1GB

//--------
int main()		
//--------
{
	std::cout << "c의 크기 - " << sizeof c << '\n';

	save("메인.cpp");
}

=========================================
Save Time: 9/22/2025 6:39:51 PM Monday
=========================================

﻿//--------------------------------------------------------------------
// 변수와 메모리
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

// [문제] 전역 메모리의 한계는 어디까지?
char c[2'147'000'000]; // 2.2GB

//--------
int main()		
//--------
{
	std::cout << "c의 크기 - " << sizeof c << '\n';

	save("메인.cpp");
}

=========================================
Save Time: 9/22/2025 6:43:57 PM Monday
=========================================

﻿//--------------------------------------------------------------------
// 변수와 메모리
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

// [문제] 전역 메모리의 한계는 어디까지?
char c[0x7f'ff'ff'ff]; 

//--------
int main()		
//--------
{
	std::cout << "c의 크기 - " << sizeof c << '\n';

	save("메인.cpp");
}

=========================================
Save Time: 9/22/2025 6:46:45 PM Monday
=========================================

﻿//--------------------------------------------------------------------
// 변수와 메모리
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

// [문제] 전역 메모리의 한계는 어디까지?
char c[2147483647];		// 2GB

//--------
int main()		
//--------
{
	std::cout << "c의 크기 - " << sizeof c << '\n';

	save("메인.cpp");
}

=========================================
Save Time: 9/22/2025 6:50:12 PM Monday
=========================================

﻿//--------------------------------------------------------------------
// 변수와 메모리
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

// [문제] 전역 메모리의 한계는 어디까지?
char c[19'4748'3647];		// 2 GB

//--------
int main()		
//--------
{
	std::cout << "c의 크기 - " << sizeof c << '\n';

	for (int i = 0; i < 100; ++i) {
		std::cout << c[i] << '\n';
	}

	save("메인.cpp");
}

=========================================
Save Time: 9/22/2025 6:52:40 PM Monday
=========================================

﻿//--------------------------------------------------------------------
// 변수와 메모리
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

// [문제] 전역 메모리의 한계는 어디까지?
char c[19'4748'3647];		// 2 GB

//--------
int main()		
//--------
{
	std::cout << "c의 크기 - " << sizeof c << '\n';

	for (int i = 0; i < 100; ++i) {
		//std::cout << c[i] + '1' << '\n'; //49 -> '1'
		std::cout << static_cast<char>(c[i] + '1') << '\n';
	}

	save("메인.cpp");
}

=========================================
Save Time: 9/22/2025 6:55:42 PM Monday
=========================================

﻿//--------------------------------------------------------------------
// 변수와 메모리
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

// [문제] 전역 메모리의 한계는 어디까지?
char c[19'4748'3647];		// 2 GB

//--------
int main()		
//--------
{
	std::cout << "c의 크기 - " << sizeof c << '\n';

	for (int i = 0; i < 1000; ++i) {
		//std::cout << c[i] + '1' << '\n'; //49 -> '1'
		std::cout << static_cast<char>(c[i] + 'A') << '\n';
	}

	save("메인.cpp");
}

=========================================
Save Time: 9/22/2025 6:56:53 PM Monday
=========================================

﻿//--------------------------------------------------------------------
// 변수와 메모리
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

// [문제] 전역 메모리의 한계는 어디까지?
char c[19'4748'3647] {1, 2, 3};		// 2 GB

//--------
int main()		
//--------
{
	std::cout << "c의 크기 - " << sizeof c << '\n';

	for (int i = 0; i < 1000; ++i) {
		//std::cout << c[i] + '1' << '\n'; //49 -> '1'
		std::cout << static_cast<char>(c[i] + 'A') << '\n';
	}

	save("메인.cpp");
}

=========================================
Save Time: 9/22/2025 6:58:24 PM Monday
=========================================

﻿//--------------------------------------------------------------------
// 변수와 메모리
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

// [문제] 전역 메모리의 한계는 어디까지?
char c[19'4748'3647] {1, 2, 3};		// 2 GB

//--------
int main()		
//--------
{
	std::cout << "c의 크기 - " << sizeof c << '\n';

	for (int i = 0; i < 100; ++i) {
		std::cout << static_cast<char>(c[i] + 'A') << '\n';
	}

	save("메인.cpp");
}

=========================================
Save Time: 9/22/2025 7:02:04 PM Monday
=========================================

﻿//--------------------------------------------------------------------
// 두 변수의 값을 교환하라
// -> pointer, reference --> 원격 메모리를 조작할 수 있는 도구
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

//--------
int main()		
//--------
{
	int a { 1 }, b { 2 };

	// 여기에서 a와 b의 값을 서로 바꾸는 코딩을 하라. (직접)
	int temp { a };
	a = b;
	b = temp;
	std::cout << a << ", " << b << '\n'; // 2, 1이 출력되어야 한다.

	save("메인.cpp");
}

=========================================
Save Time: 9/24/2025 5:37:11 PM Wednesday
=========================================

﻿//--------------------------------------------------------------------
// 두 변수의 값을 교환하라
// -> pointer, reference --> 원격 메모리를 조작할 수 있는 도구
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

//--------
int main()		
//--------
{
	int a { 1 }, b { 2 };

	// 여기에서 a와 b의 값을 서로 바꾸는 코딩을 하라. (직접)
	std::swap(a, b);

	std::cout << a << ", " << b << '\n'; // 2, 1이 출력되어야 한다.

	save("메인.cpp");
}

=========================================
Save Time: 9/24/2025 5:40:30 PM Wednesday
=========================================

﻿//--------------------------------------------------------------------
// 두 변수의 값을 교환하라
// -> pointer, reference --> 원격 메모리를 조작할 수 있는 도구
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

//void change(int& x, int& y)
//{
//	int temp = x;
//	x = y;
//	y = temp;
//}

void change(int* x, int* y)
{
	int temp = *x;
	*x = *y;
	*y = temp;
}

//--------
int main()		
//--------
{
	int a { 1 }, b { 2 };

	// 여기에서 a와 b의 값을 서로 바꾸는 코딩을 하라. (직접)
	change(&a, &b);

	std::cout << a << ", " << b << '\n'; // 2, 1이 출력되어야 한다.

	save("메인.cpp");
}

=========================================
Save Time: 9/24/2025 6:01:58 PM Wednesday
=========================================

﻿//--------------------------------------------------------------------
// 두 변수의 값을 교환하라
// -> pointer, reference --> 원격 메모리를 조작할 수 있는 도구
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

//--------
int main()		
//--------
{
	int a { 1 }, b { 2 };

	std::cout << std::addressof(a) << "\n"; // a의 주소
	std::cout << std::addressof(b) << "\n"; // b의 주소

	std::cout << a << ", " << b << '\n'; // 2, 1이 출력되어야 한다.

	save("메인.cpp");
}

=========================================
Save Time: 9/24/2025 6:20:29 PM Wednesday
=========================================

﻿//--------------------------------------------------------------------
// 두 변수의 값을 교환하라
// -> pointer, reference --> 원격 메모리를 조작할 수 있는 도구
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

void change(int*, int*);	// int pointer, pointer to int, 
							// int형 변수의 주소를 담을 수 있는 

void change(int* a, int* b)
{
	int temp { *a }; // * : dereference - 역참조 연산자
	*a = *b;      
	*b = temp;    
}

//--------
int main()		
//--------
{
	int a { 1 }, b { 2 };

	// 여기에서 a와 b의 값을 서로 바꾸는 코딩을 하라. (직접)
	change(&a, &b); // & : address of 연산자.

	std::cout << a << ", " << b << '\n'; // 2, 1이 출력되어야 한다.

	save("메인.cpp");
}

=========================================
Save Time: 9/24/2025 6:21:38 PM Wednesday
=========================================

﻿//--------------------------------------------------------------------
// 두 변수의 값을 교환하라
// -> pointer, reference --> 원격 메모리를 조작할 수 있는 도구
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

void change(int*, int*);	// int pointer, pointer to int, 
							// int형 변수의 주소를 담을 수 있는 

void change(int* a, int* b)
{
	int temp { *a }; // * : dereference - 역참조 연산자
	*a = *b;      
	*b = temp;    
}

//--------
int main()		
//--------
{
	int a { 1 }, b { 2 };

	// 여기에서 a와 b의 값을 서로 바꾸는 코딩을 하라. (직접)
	change(&a, &b); // & : address of 연산자.

	// 주소를 넘기는 것 말고는 방법이 없다.

	std::cout << a << ", " << b << '\n'; // 2, 1이 출력되어야 한다.

	save("메인.cpp");
}

=========================================
Save Time: 9/24/2025 6:24:38 PM Wednesday
=========================================

﻿//--------------------------------------------------------------------
// 두 변수의 값을 교환하라
// -> pointer, reference --> 원격 메모리를 조작할 수 있는 도구
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"


//--------
int main()		
//--------
{
	// 포인터 - 주소값을 저장하기 위한 자료형과 변수
	int a { 1 };

	int* p;

	p = &a;	// & : 주소 연산자

	*p = 20250924;	// * : 간접 참조 연산자

	std::cout << "a의 값: " << a << '\n';

	save("메인.cpp");
}

=========================================
Save Time: 9/24/2025 6:30:35 PM Wednesday
=========================================

﻿//--------------------------------------------------------------------
// 두 변수의 값을 교환하라
// -> pointer, reference --> 원격 메모리를 조작할 수 있는 도구
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"


//--------
int main()		
//--------
{
	// 포인터 - 주소값을 저장하기 위한 자료형과 변수
	int a { 1 };

	// 아래 코드는 세 개의 토큰(token)으로 구성
	int* p;		// int	: 기본 자료형
				// *	: 장식, int가 아닌 int* 라는 새로운 자료형 (포인터 자료형)
				// p	: 변수 이름	

	p = &a;	// & : 주소 연산자

	*p = 20250924;	// * : 간접 참조 연산자

	std::cout << "a의 값: " << a << '\n';

	save("메인.cpp");
}

=========================================
Save Time: 9/24/2025 6:35:08 PM Wednesday
=========================================

﻿//--------------------------------------------------------------------
// 두 변수의 값을 교환하라
// -> pointer, reference --> 원격 메모리를 조작할 수 있는 도구
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"


//--------
int main()		
//--------
{
	int a[] { 3, 9, 1, 4, 2, 0, 8, 5, 7, 6 };

	for (int num : a) {
		std::cout << num << ' ';
	}
	std::cout << '\n';

	save("메인.cpp");
}

=========================================
Save Time: 9/24/2025 6:36:13 PM Wednesday
=========================================

﻿//--------------------------------------------------------------------
// 두 변수의 값을 교환하라
// -> pointer, reference --> 원격 메모리를 조작할 수 있는 도구
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

void change(int* x, int* y)
{
	int temp = *x;
	*x = *y;
	*y = temp;
}

//--------
int main()		
//--------
{
	int a[] { 3, 9, 1, 4, 2, 0, 8, 5, 7, 6 };

	// 두 원소의 값을 change로 바꿀 수 있다.
	change(&a[0], &a[1]);

	for (int num : a) {
		std::cout << num << ' ';
	}
	std::cout << '\n';

	save("메인.cpp");
}

=========================================
Save Time: 9/24/2025 6:44:21 PM Wednesday
=========================================

﻿//--------------------------------------------------------------------
// 두 변수의 값을 교환하라
// -> pointer, reference --> 원격 메모리를 조작할 수 있는 도구
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

void change(int* x, int* y)
{
	int temp = *x;
	*x = *y;
	*y = temp;
}

//--------
int main()		
//--------
{
	int a[] { 3, 9, 1, 4, 2, 0, 8, 5, 7, 6 };

	// 두 원소의 값을 change로 바꿀 수 있다.
	change(&a[0], &a[1]);

	for (int num : a) {
		std::cout << num << ' ';
	}
	std::cout << '\n';

	// [문제] a의 값 중에서 가장 큰 수를 오른쪽으로 옮겨라
	int BigIndex { 0 };
	for (int i = 0; i < 10; ++i) {
		if (a[BigIndex] < a[i]) {
			BigIndex = i;
		}
	}
	change(&a[BigIndex], &a[9]);

	save("메인.cpp");
}

=========================================
Save Time: 9/24/2025 6:46:00 PM Wednesday
=========================================

﻿//--------------------------------------------------------------------
// 두 변수의 값을 교환하라
// -> pointer, reference --> 원격 메모리를 조작할 수 있는 도구
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

void change(int* x, int* y)
{
	int temp = *x;
	*x = *y;
	*y = temp;
}

//--------
int main()		
//--------
{
	int a[] { 3, 9, 1, 4, 2, 0, 8, 5, 7, 6 };

	// [문제] a의 값 중에서 가장 큰 수를 오른쪽으로 옮겨라
	for (int i = 0; i < 9; ++i) {
		if (a[i] > a[i + 1]) 
			change(&a[i], &a[i + 1]);

		for (int num : a) {
			std::cout << num << ' ';
		}
		std::cout << '\n';
	}

	save("메인.cpp");
}

=========================================
Save Time: 9/24/2025 6:49:14 PM Wednesday
=========================================

﻿//--------------------------------------------------------------------
// 두 변수의 값을 교환하라
// -> pointer, reference --> 원격 메모리를 조작할 수 있는 도구
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

void change(int* x, int* y)
{
	int temp = *x;
	*x = *y;
	*y = temp;
}

//--------
int main()		
//--------
{
	int a[] { 3, 9, 1, 4, 2, 0, 8, 5, 7, 6 };

	// [문제] a의 값을 오름차순으로 정렬하시오

	for (int i = 0; i < 10 - 1; i++)
	{
		if (a[i] > a[i + 1]) 
			change(&a[i], &a[i + 1]);
	}
	for (int i = 0; i < 10 - 2; i++) {
		if (a[i] > a[i + 1])
			change(&a[i], &a[i + 1]);
	}
	for (int i = 0; i < 10 - 3; i++) {
		if (a[i] > a[i + 1])
			change(&a[i], &a[i + 1]);
	}

	for (int num : a) {
		std::cout << num << ' ';
	}
	std::cout << '\n';

	save("메인.cpp");
}


=========================================
Save Time: 9/24/2025 6:55:54 PM Wednesday
=========================================

﻿//--------------------------------------------------------------------
// 두 변수의 값을 교환하라
// -> pointer, reference --> 원격 메모리를 조작할 수 있는 도구
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

void change(int* x, int* y)
{
	int temp = *x;
	*x = *y;
	*y = temp;
}

//--------
int main()		
//--------
{
	int a[] { 3, 9, 1, 4, 2, 0, 8, 5, 7, 6 };

	// [문제] a의 값을 오름차순으로 정렬하시오
	// 버블정렬

	for (int i = 1; i < 10; ++i)
	{
		for (int j = 0; j < 10 - i; ++j)
		{
			if (a[j] > a[j + 1])
			{
				change(&a[j], &a[j + 1]);
			}
		}
	}
	
	for (int num : a) {
		std::cout << num << ' ';
	}
	std::cout << '\n';

	save("메인.cpp");
}

=========================================
Save Time: 9/24/2025 6:59:37 PM Wednesday
=========================================

﻿//--------------------------------------------------------------------
// 두 변수의 값을 교환하라
// -> pointer, reference --> 원격 메모리를 조작할 수 있는 도구
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

void change(int* x, int* y)
{
	int temp = *x;
	*x = *y;
	*y = temp;
}

//--------
int main()		
//--------
{
	int a[] { 3, 9, 1, 4, 2, 0, 8, 5, 7, 6 };

	// [문제] a의 값을 오름차순으로 정렬하시오
	// 버블정렬

	for (int i = 1; i < 10; ++i)
	{
		for (int j = 0; j < 10 - i; ++j)
		{
			if (a[j] < a[j + 1])
				change(&a[j], &a[j + 1]);
		}
	}
	
	for (int num : a) {
		std::cout << num << ' ';
	}
	std::cout << '\n';

	save("메인.cpp");
}


=========================================
Save Time: 9/29/2025 5:32:44 PM Monday
=========================================

﻿//--------------------------------------------------------------------
// 두 변수의 값을 교환하라
// -> pointer, reference --> 원격 메모리를 조작할 수 있는 도구
//--------------------------------------------------------------------

#include <iostream>
#include <random>
#include <print>
#include "save.h"

void change(int* x, int* y)
{
	int temp = *x;
	*x = *y;
	*y = temp;
}

// [문제] 랜덤값(0~99'999)을 갖는 int 10'000개를 만들어라.
// 오름차순으로 정렬하라.
// 정렬 결과를 화면에 출력하라.

std::default_random_engine dre { std::random_device()() };
std::uniform_int_distribution uid { 0, 99999 };

//--------
int main()
//--------
{
	const int SIZE { 10'000 };

	int a[SIZE];
	for (int& num : a) {
		num = uid(dre);
	}

	// [문제] a의 값을 오름차순으로 정렬하시오
	// 버블정렬

	for (int i = 1; i < SIZE; ++i)
	{
		for (int j = 0; j < SIZE - i; ++j)
		{
			if (a[j] > a[j + 1])
				change(&a[j], &a[j + 1]);
		}
	}
	
	for (int num : a) {
		std::print("{:6}", num);
	}
	std::cout << '\n';

	save("메인.cpp");
}


=========================================
Save Time: 9/29/2025 5:41:29 PM Monday
=========================================

﻿//--------------------------------------------------------------------
// 두 변수의 값을 교환하라
// -> pointer, reference --> 원격 메모리를 조작할 수 있는 도구
//--------------------------------------------------------------------

#include <iostream>
#include <random>
#include <print>
#include "save.h"

void change(int* x, int* y)
{
	int temp = *x;
	*x = *y;
	*y = temp;
}

// [문제] 랜덤값(0~99'999)을 갖는 int 10'000개를 만들어라.
// 오름차순으로 정렬하라.
// 정렬 결과를 화면에 출력하라.

std::default_random_engine dre { std::random_device()() };
std::uniform_int_distribution uid { 0, 99999 };

//--------
int main()
//--------
{
	const int SIZE { 10'000 };

	int a[SIZE];
	for (int& num : a) {
		num = uid(dre);
	}

	// [문제] a의 값을 오름차순으로 정렬하시오
	// 버블정렬

	for (int i = 1; i < SIZE; ++i)
	{
		for (int j = 0; j < SIZE - i; ++j)
		{
			if (a[j] > a[j + 1])
				change(&a[j], &a[j + 1]);
		}
	}
	
	for (int num : a) {
		std::print("{:6}", num);
	}
	std::cout << '\n';

	save("메인.cpp");
}


=========================================
Save Time: 9/29/2025 5:51:15 PM Monday
=========================================

﻿//--------------------------------------------------------------------
// 두 변수의 값을 교환하라
// -> pointer, reference --> 원격 메모리를 조작할 수 있는 도구
//--------------------------------------------------------------------
// 포인터 - 어떤 지역에서 다른 지역에 있는 메모리를 access 할 때 사용
//--------------------------------------------------------------------

#include <iostream>
#include <random>
#include <print>
#include "save.h"

void change(int* x, int* y)
{
	int temp = *x;
	*x = *y;
	*y = temp;
}


// [문제] 랜덤값(0~99'999)을 갖는 int 100'000개를 만들어라.
// 오름차순으로 정렬하라.
// 정렬 결과를 한 줄(80글자)에 10개씩 화면에 출력하라.


// ===== 교수님 정답 ======


std::default_random_engine dre { std::random_device()() };
std::uniform_int_distribution uid { 0, 99999 };

const const const int const SIZE { 10'0000 }; 
// const : 읽기만 가능하게 만드는 자격 부여 (Read Only)

//--------
int main()
//--------
{

	int a[SIZE];
	for (int i = 0; i < SIZE; ++i) {
		a[i] = uid(dre);
	}

	// [문제] a의 값을 오름차순으로 정렬하시오
	// 버블정렬

	for (int i = 0; i < SIZE - 1; ++i)
	{
		for (int j = 0; j < SIZE - 1 - i; ++j)
		{
			if (a[j] > a[j + 1])
				change(&a[j], &a[j + 1]);
		}
	}
	
	for (int num : a) {
		std::print("{:8}", num);
	}
	std::cout << '\n';

	save("메인.cpp");
}


=========================================
Save Time: 9/29/2025 5:55:24 PM Monday
=========================================

﻿//--------------------------------------------------------------------
// 레퍼런스 - 
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

//--------
int main()
//--------
{
	int a { 1 };
	
	// 레퍼런스 설명 (틀에 박힌)
	int& r { a };
	r = 2025'0929;
	std::cout << a << '\n';

	save("메인.cpp");
}


=========================================
Save Time: 9/29/2025 6:04:57 PM Monday
=========================================

﻿//--------------------------------------------------------------------
// 레퍼런스 - 
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

//--------
int main()
//--------
{
	int a { 1 }; 
	int& r { a };  

	// [문제] a와 r의 정체를 파악해주세요.

	std::cout << "== a의 정체 ==" << '\n'; 
	std::cout << "a의 메모리 크기 - " << sizeof a << "\n"; 
	std::cout << "a의 메모리 주소 - " << std::addressof(a) << "\n";
	std::cout << "a의 데이터 타입 - " << typeid(a).name() << "\n";

	std::cout << "== r의 정체 == " << '\n';
	std::cout << "r의 메모리 크기 - " << sizeof r << "\n";
	std::cout << "r의 메모리 주소 - " << std::addressof(r) << "\n";
	std::cout << "r의 데이터 타입 - " << typeid(r).name() << "\n";

	save("메인.cpp");
}


=========================================
Save Time: 9/29/2025 6:06:02 PM Monday
=========================================

﻿//--------------------------------------------------------------------
// 레퍼런스 - 
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

//--------
int main()
//--------
{
	int a { 1 }; 
	int& r { a };  

	// [문제] a와 r의 정체를 파악해주세요.

	std::cout << "== a의 정체 ==" << '\n'; 
	std::cout << "a의 메모리 크기 - " << sizeof a << "\n"; 
	std::cout << "a의 메모리 주소 - " << std::addressof(a) << "\n";
	std::cout << "a의 데이터 타입 - " << typeid(a).name() << "\n\n";

	std::cout << "== r의 정체 == " << '\n';
	std::cout << "r의 메모리 크기 - " << sizeof r << "\n";
	std::cout << "r의 메모리 주소 - " << std::addressof(r) << "\n";
	std::cout << "r의 데이터 타입 - " << typeid(r).name() << "\n\n";

	save("메인.cpp");
}


=========================================
Save Time: 9/29/2025 6:12:34 PM Monday
=========================================

﻿//--------------------------------------------------------------------
// 레퍼런스 - 
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

//--------
int main()
//--------
{
	int a { 1 }; 
	int& r { a };  
	int* p { &a };

	// [문제] a와 r의 정체를 파악해주세요.

	std::cout << "== a의 정체 ==" << '\n'; 
	std::cout << "a의 메모리 크기 - " << sizeof a << "\n"; 
	std::cout << "a의 메모리 주소 - " << std::addressof(a) << "\n";
	std::cout << "a의 데이터 타입 - " << typeid(a).name() << "\n\n";

	std::cout << "== r의 정체 == " << '\n';
	std::cout << "r의 메모리 크기 - " << sizeof r << "\n";
	std::cout << "r의 메모리 주소 - " << std::addressof(r) << "\n";
	std::cout << "r의 데이터 타입 - " << typeid(r).name() << "\n\n";

	std::cout << "== p의 정체 == " << '\n';
	std::cout << "p의 메모리 크기 - " << sizeof *p << "\n";
	std::cout << "p의 메모리 주소 - " << std::addressof(*p) << "\n";
	std::cout << "p의 데이터 타입 - " << typeid(*p).name() << "\n\n";

	// 이름 이란건, 컴퓨터 속에 없다.
	// a = 3333; 라고 써도,
	// 컴퓨터는 300번지의 값 = 3333; 이런식으로 바꾼다.
	// alias(별칭) - 별명

	save("메인.cpp");
}


=========================================
Save Time: 9/29/2025 6:16:00 PM Monday
=========================================

﻿//--------------------------------------------------------------------
// 레퍼런스 - 메모리를 차지한 객체에 붙이는 별명
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

//--------
int main()
//--------
{
	int a { 1 }; 
	
	// int& r; // 불가능한 코드, 실체가 없는 별명?

	save("메인.cpp");
}


=========================================
Save Time: 9/29/2025 6:19:19 PM Monday
=========================================

﻿//--------------------------------------------------------------------
// C++에서 포인터 대신 사용할 수 있는 레퍼런스(reference)
// 레퍼런스 - 메모리를 차지한 객체에 붙이는 별명
// 왜? - 포인터를 잘 이해하는 프로그래머가 편하고 쉽게 다른 지역의 메모리에 
//       access하기 위한 도구
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

//--------
int main()
//--------
{
	int a { 1 };
	int& r { a };

	// [문제] a와 r의 정체를 파악해주세요.

	std::cout << "a의 메모리 크기 - " << sizeof a << "\n";
	std::cout << "a의 메모리 주소 - " << std::addressof(a) << "\n";
	std::cout << "a의 데이터 타입 - " << typeid(a).name() << "\n\n";

	std::cout << "r의 메모리 크기 - " << sizeof r << "\n";
	std::cout << "r의 메모리 주소 - " << std::addressof(r) << "\n";
	std::cout << "r의 데이터 타입 - " << typeid(r).name() << "\n\n";

	save("메인.cpp");
}

=========================================
Save Time: 9/29/2025 6:23:16 PM Monday
=========================================

﻿//--------------------------------------------------------------------
// C++에서 포인터 대신 사용할 수 있는 레퍼런스(reference)
//--------------------------------------------------------------------

#include <iostream>
#include <random>
#include <print>
#include "save.h"

void change(int*, int*); // 선언
void change(int&, int&); 

void change(int* x, int* y)
{
	int temp { *x };
	*x = *y;
	*y = temp;
}

void change(int& x, int& y)
{
	int temp { x };
	x = y;
	y = temp;
}


// [문제] 랜덤값(0~99'999)을 갖는 int 100'000개를 만들어라.
// 오름차순으로 정렬하라.
// 정렬 결과를 한 줄(80글자)에 10개씩 화면에 출력하라.


// ===== 교수님 정답 ======


std::default_random_engine dre { std::random_device()() };
std::uniform_int_distribution uid { 0, 99999 };

const int SIZE { 10'000 };

//--------
int main()
//--------
{

	int a[SIZE];
	for (int i = 0; i < SIZE; ++i) {
		a[i] = uid(dre);
	}

	// [문제] a의 값을 오름차순으로 정렬하시오
	// 버블정렬

	for (int i = 0; i < SIZE - 1; ++i) {
		for (int j = 0; j < SIZE - 1 - i; ++j) {
			if (a[j] > a[j + 1])
				change(a[j], a[j + 1]);		// call by reference
		}
	}

	for (int num : a) {
		std::print("{:8}", num);
	}
	std::cout << '\n';

	save("메인.cpp");
}

=========================================
Save Time: 9/29/2025 7:01:36 PM Monday
=========================================

﻿//--------------------------------------------------------------------
// C++에서 포인터 대신 사용할 수 있는 레퍼런스(reference)
//--------------------------------------------------------------------

#include <iostream>
#include <random>
#include <print>
#include "save.h"

void change(int&, int&); 

void change(int& x, int& y)
{
	int temp { x };
	x = y;
	y = temp;
}


// [문제] 랜덤값(0~99'999)을 갖는 int 100'000개를 만들어라.
// 오름차순으로 정렬하라.
// 정렬 결과를 한 줄(80글자)에 10개씩 화면에 출력하라.


// ===== 교수님 정답 ======


std::default_random_engine dre { std::random_device()() };
std::uniform_int_distribution uid { 0, 99999 };

const int SIZE { 10'0000 };

int 이렇게(const void* a, const void* b)
{
	int x = (*(int*)a);
	int y = (*(int*)b);

	if (x < y) 
		return -1;
	else if (x > y) 
		return 1;
	return 0; // stable한 sort 에 필요
}

//--------
int main()
//--------
{
	int a[SIZE]; 
	// contiguous memory	(인접한, 공간의 연속)
	// continuous			(연속, 시간)

	for (int i = 0; i < SIZE; ++i) {
		a[i] = uid(dre);
	}

	// [문제] a의 값을 오름차순으로 정렬하시오
	// 정렬 전문 코드에 부탁해서 정렬하면 된다.

	qsort( a, SIZE, sizeof(int), 이렇게);
	// std::sort();
	// std::ranges::sort();

	for (int num : a) {
		std::print("{:8}", num);
	}
	std::cout << '\n';

	save("메인.cpp");
}

=========================================
Save Time: 10/1/2025 6:22:45 PM Wednesday
=========================================

﻿//--------------------------------------------------------------------
// 10. 27 월요일 - 중간시험 
//--------------------------------------------------------------------
// C++에서 포인터 대신 사용할 수 있는 레퍼런스(reference)
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

// <방법> : qsort가 요구하는 형식에 맞는 비교함수
// 리턴은 반드시 int를 리턴하는 형식으로 약속
// 인자는 const void* 형식의 포인터 2개를 받도록 약속
int 방법(const void* a, const void* b) 
{
	char x = (*(char*)a);
	char y = (*(char*)b);

	if (x < y)
		return -1;
	else if (x > y)
		return 1;
	return 0; 
}

//--------
int main()
//--------
{
	char pangram[] {"The quick brown fox jumps over the lazy dog"};

	// [문제] pangram을 오름차순으로 qsort를 사용하여 정렬하고 출력하라.

	std::cout << "pangram 이 차지한 메모리 - " << sizeof pangram << " 바이트\n";

	qsort(pangram, (sizeof pangram - sizeof(char)) / sizeof(char), 
		  sizeof(char), 방법);

	for (char c : pangram)
		std::cout << c << " --- ";
	std::cout << '\n';

	save("main.cpp");
}

=========================================
Save Time: 10/1/2025 6:23:58 PM Wednesday
=========================================

﻿//--------------------------------------------------------------------
// 10. 27 월요일 - 중간시험 
//--------------------------------------------------------------------
// C++에서 포인터 대신 사용할 수 있는 레퍼런스(reference)
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

// <방법> : qsort가 요구하는 형식에 맞는 비교함수
// 리턴은 반드시 int를 리턴하는 형식으로 약속
// 인자는 const void* 형식의 포인터 2개를 받도록 약속
int 방법(const void* a, const void* b) 
{
	char x = (*(char*)a);
	char y = (*(char*)b);

	if (x < y)
		return -1;
	else if (x > y)
		return 1;
	return 0; 
}

//--------
int main()
//--------
{
	char pangram[] {"The quick brown fox jumps over the lazy dog"};

	// [문제] pangram을 오름차순으로 qsort를 사용하여 정렬하고 출력하라.

	std::cout << "pangram 이 차지한 메모리 - " << sizeof pangram << " 바이트\n";

	qsort(pangram, (sizeof pangram - sizeof(char)) / sizeof(char), 
		  sizeof(char), 방법);

	std::cout << pangram << '\n';

	save("main.cpp");
}

=========================================
Save Time: 10/1/2025 6:27:51 PM Wednesday
=========================================

﻿//--------------------------------------------------------------------
// 10. 27 월요일 - 중간시험 
//--------------------------------------------------------------------
// C++에서 포인터 대신 사용할 수 있는 레퍼런스(reference)
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

// <방법> : qsort가 요구하는 형식에 맞는 비교함수
// 리턴은 반드시 int를 리턴하는 형식으로 약속
// 인자는 const void* 형식의 포인터 2개를 받도록 약속
int 방법(const void* a, const void* b) 
{
	char x = (*(char*)a);
	char y = (*(char*)b);

	if (x < y)
		return -1;
	else if (x > y)
		return 1;
	return 0; 
}

//--------
int main()
//--------
{
	char pangram[] {"The quick brown fox jumps over the lazy dog"};

	// [문제] pangram을 오름차순으로 qsort를 사용하여 정렬하고 출력하라.

	std::cout << "pangram 이 차지한 메모리 - " << sizeof pangram << " 바이트\n";

	qsort(pangram, (sizeof pangram - sizeof(char)) / sizeof(char), 
		  sizeof(char), 방법);

	std::cout << std::addressof(pangram) << '\n';
	std::cout << std::hex << (int)pangram << '\n';

	save("main.cpp");
}

=========================================
Save Time: 10/1/2025 6:31:54 PM Wednesday
=========================================

﻿//--------------------------------------------------------------------
// 10. 27 월요일 - 중간시험 
//--------------------------------------------------------------------
// C++에서 포인터 대신 사용할 수 있는 레퍼런스(reference)
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

// <방법> : qsort가 요구하는 형식에 맞는 비교함수
// 리턴은 반드시 int를 리턴하는 형식으로 약속
// 인자는 const void* 형식의 포인터 2개를 받도록 약속
int 방법(const void* a, const void* b) 
{
	return *(char*)a - *(char*)b; 
	// 양수, 음수, 0을 리턴하는 형식으로 한줄로 작성 가능
	// 내림차순이면 a, b 순서를 바꾸면 됨
}

//--------
int main()
//--------
{
	char pangram[] {"The quick brown fox jumps over the lazy dog"};

	// [문제] pangram을 오름차순으로 qsort를 사용하여 정렬하고 출력하라.

	std::cout << "pangram 이 차지한 메모리 - " << sizeof pangram << " 바이트\n";

	qsort(pangram, sizeof pangram - 1, 1, 방법);

	std::cout << pangram << '\n';

	save("main.cpp");
}

=========================================
Save Time: 10/1/2025 6:34:51 PM Wednesday
=========================================

﻿//--------------------------------------------------------------------
// 10. 27 월요일 - 중간시험 
//--------------------------------------------------------------------
// C++에서 포인터 대신 사용할 수 있는 레퍼런스(reference)
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

// <방법> : qsort가 요구하는 형식에 맞는 비교함수
// 리턴은 반드시 int를 리턴하는 형식으로 약속
// 인자는 const void* 형식의 포인터 2개를 받도록 약속
int 방법(const void* a, const void* b) 
{
	return *(char*)a - *(char*)b; 
	// 양수, 음수, 0을 리턴하는 형식으로 한줄로 작성 가능
	// 내림차순이면 a, b 순서를 바꾸면 됨
}

//--------
int main()
//--------
{
	std::cout << '\7' << '\n';

	save("main.cpp");
}

=========================================
Save Time: 10/1/2025 6:47:25 PM Wednesday
=========================================

﻿//--------------------------------------------------------------------
// 10. 27 월요일 - 중간시험 
//--------------------------------------------------------------------
// C++에서 포인터 대신 사용할 수 있는 레퍼런스(reference)
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

// <방법> : qsort가 요구하는 형식에 맞는 비교함수
// 리턴은 반드시 int를 리턴하는 형식으로 약속
// 인자는 const void* 형식의 포인터 2개를 받도록 약속
int 방법(const void* a, const void* b) 
{
	return *(char*)a - *(char*)b; 
	// 양수, 음수, 0을 리턴하는 형식으로 한줄로 작성 가능
	// 내림차순이면 a, b 순서를 바꾸면 됨
}

//--------
int main()
//--------
{
	char pangram[] {"The quick brown fox jumps over the lazy dog"};

	// [문제] pangram을 오름차순으로 qsort를 사용하여 정렬하고 출력하라.

	qsort(pangram, sizeof pangram - 1, 1, 방법);

	// generic function : 어떤 타입이든 다 처리할 수 있는 함수
	// 프로그래밍에서 generic 이란, 타입을 가리지 않고 다 처리할 수 있는 것을 의미

	// C/C++ -> Procedural Programming
	// C with Classes -> C++의 원래 정의 Object Oriented Programming
	
	// C++의 현재 정의
	// Generic Programming Language			
	// Functional Programming Language
	// Meta Programming Language 

	// OOP 와 GP 는 관점이 다르다.

	// qsort는 Generic Programming의 시작점이라고 볼 수 있음.
	// 자료형에 관심이 없는 함수

	std::cout << pangram << '\n';

	save("main.cpp");
}

=========================================
Save Time: 10/1/2025 7:05:15 PM Wednesday
=========================================

﻿//--------------------------------------------------------------------
// 10. 27 월요일 - 중간시험 
//--------------------------------------------------------------------
// 동적할당(Dynamic Allocation) - dynamic은 run-time으로 해석해야 함
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

// [문제] 사용자가 원하는 숫자만큼 int를 저장할 메모리를 확보한다.
// 그 메모리를 1부터 시작하는 정수로 채워라.
// 메모리의 합계를 화면에 출력하여라.

//--------
int main()
//--------
{
	std::cout << "int 몇 개가 필요한가요? ";
	int num;
	std::cin >> num;

	int*p = new int[num];
	for (int i = 0; i < num; ++i)
		p[i] = i + 1;
	for (int i = 0; i < num; ++i)
		std::cout << p[i] << ' ';

	save("main.cpp");
}

=========================================
Save Time: 10/13/2025 5:52:13 PM Monday
=========================================

﻿//--------------------------------------------------------------------
// 10. 27 월요일 - 중간시험  
//--------------------------------------------------------------------
// 동적할당(Dynamic Allocation) - dynamic은 run-time으로 해석해야 함
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

// 이 줄은 시험의 편의를 위한 것이다. 이런 코딩은 절대 하면 안됨.
using namespace std;


// [문제] 사용자가 원하는 숫자만큼 int를 저장할 메모리를 확보한다.
// 그 메모리를 1부터 시작하는 정수로 채워라.
// 메모리의 합계를 화면에 출력하여라.

//--------
int main()
//--------
{
	cout << "int 몇 개가 필요한가요? ";
	unsigned num; // unsigned : 0과 양수만 저장하는 정수형(int)
	cin >> num;

	// int[num] -> 프로그램을 실행해야 확정되는 메모리
	// C++에서는 new 연산자를 사용하여 동적할당을 한다. (free-store allocation)

	// [] -> contiguous 한 메모리를 달라고 요청(request)
	// Memory Manager : 운영체제(OS)로부터 메모리를 빌려서 관리하는 프로그램이고, 링크드 리스트로 관리한다.

	new int[num]; // new 연산자는 요청이 성공하면 요청한 '메모리의 시작주소'를 리턴한다.

	save("main.cpp");
}