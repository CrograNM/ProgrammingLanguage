

=========================================
저장한 시간: 2025-09-08 오후 5:31:31 월요일
=========================================

//--------------------------------------------------------------------
// 2025. 3-2. 프로그래밍언어, 9월 8일 월요일 (2주 1일)
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

int main()
{
	std::cout << "구구단을 출력하겠습니다." << std::endl;
	
	save("메인.cpp");
}

=========================================
저장한 시간: 2025-09-08 오후 5:36:31 월요일
=========================================

//--------------------------------------------------------------------
// 2025. 3-2. 프로그래밍언어, 9월 8일 월요일 (2주 1일)
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

int main()
{
	std::cout << "구구단을 출력하겠습니다." << std::endl;
	
	while (true) {
		std::cout << "몇 단? ";

		int n;
		std::cin >> n;

		if (n < 2 || n > 9) {
			std::cout << "2~9 사이의 값을 입력하세요!" << std::endl;
			break;
		}
		for (int i = 1; i <= 9; ++i) {
			std::cout << n << " x " << i << " = " << n * i << std::endl;
		}
	}

	save("메인.cpp");
}

=========================================
������ �ð�: 2025-09-08 ���� 5:46:06 ������
=========================================

﻿//--------------------------------------------------------------------
// 2025. 3-2. 프로그래밍언어, 9월 8일 월요일 (2주 1일)
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

int main()
{
	std::cout << "구구단을 출력하겠습니다." << std::endl;
	
	while (true) {
		std::cout << "몇 단? ";

		int dan;
		std::cin >> dan;

		if (dan < 2 || dan > 9) {
			std::cout << "2~9 사이의 값을 입력하세요!" << std::endl;
			break;
		}

		// n단 출력
		std::cout << dan << "단" << std::endl;
		for (int i = 1; i <= 9; ++i) {
			std::cout << dan << " x " << i << " = " << dan * i << std::endl;
		}
	}
	save("메인.cpp");
}

=========================================
������ �ð�: 2025-09-08 ���� 5:49:42 ������
=========================================

﻿//--------------------------------------------------------------------
// 2025. 3-2. 프로그래밍언어, 9월 8일 월요일 (2주 1일)
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

// [문제] 전체 구구단을 출력하는 프로그램을 작성하시오.

int main()
{
	int dan;

	for (dan = 2; dan <= 9; ++dan) {
		std::cout << "\n=== " << dan << "단 ===" << std::endl;
		for (int i = 1; i <= 9; ++i) {
			std::cout << dan << " * " << i << " = " << dan * i << std::endl;
		}
		std::cout << std::endl;
	}

	save("메인.cpp");
}

=========================================
Save Time: 2025-09-08 ���� 5:54:23 ������
=========================================

﻿//--------------------------------------------------------------------
// 2025. 3-2. 프로그래밍언어, 9월 8일 월요일 (2주 1일)
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

// [문제] 전체 구구단을 출력하는 프로그램을 작성하시오.

int main()
{
	int dan;

	for (dan = 2; dan <= 9; ++dan) {
		std::cout << "\n=== " << dan << "단 ===" << std::endl;
		for (int i = 1; i <= 9; ++i) {
			std::cout << dan << " * " << i << " = " << dan * i << std::endl;
		}
		std::cout << std::endl;
	}

	save("메인.cpp");
}

=========================================
Save Time: 2025-09-08 ���� 6:03:59 ������
=========================================

﻿//--------------------------------------------------------------------
// 2025. 3-2. 프로그래밍언어, 9월 8일 월요일 (2주 1일)
//--------------------------------------------------------------------

#include <iostream>
#include <iomanip>
#include "save.h"

// [문제] 전체 구구단을 예시와 꼭 같이 그대로 출력하라 (줄맞춤)
// 단과 단 사이는 한 줄 띄워라

// (예시)
// 7 x 1 =  7
// 7 x 2 = 14
// ...

int main()
{
	for (int dan = 2; dan <= 9; ++dan) {
		for (int i = 1; i <= 9; ++i) {
			std::cout << dan << " x " << i << " = " << std::setw(2) << dan * i << '\n';
		}
		std::cout << '\n';
	}

	save("메인.cpp");
}

=========================================
Save Time: 2025-09-08 ���� 6:06:29 ������
=========================================

﻿//--------------------------------------------------------------------
// 2025. 3-2. 프로그래밍언어, 9월 8일 월요일 (2주 1일)
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

// [문제] 전체 구구단을 예시와 꼭 같이 그대로 출력하라 (줄맞춤)
// 단과 단 사이는 한 줄 띄워라

// (예시)
// 7 x 1 =  7
// 7 x 2 = 14
// ...

// 정답은 format이라고 한다.

int main()
{
	for (int dan = 2; dan <= 9; ++dan) {
		for (int i = 1; i <= 9; ++i) {
			std::cout << std::format("{0} x {1} = {2:2}\n", dan, i, dan * i);
		}
		std::cout << '\n';
	}
	save("메인.cpp");
}

=========================================
Save Time: 2025-09-08 ���� 6:10:23 ������
=========================================

﻿//--------------------------------------------------------------------
// 2025. 3-2. 프로그래밍언어, 9월 8일 월요일 (2주 1일)
//--------------------------------------------------------------------

#include <iostream>
#include <print>
#include "save.h"

// [문제] 전체 구구단을 예시와 꼭 같이 그대로 출력하라 (줄맞춤)
// 단과 단 사이는 한 줄 띄워라

// (예시)
// 7 x 1 =  7
// 7 x 2 = 14
// ...

// 정답은 format이라고 한다.

int main()
{
	for (int dan = 2; dan <= 9; ++dan) {
		for (int i = 1; i <= 9; ++i) {
			std::println("{0} x {1} = {2:2}", dan, i, dan * i); 
			// #include <print> 사용
		}
		std::cout << '\n';
	}
	save("메인.cpp");
}

=========================================
Save Time: 2025-09-08 ���� 6:13:48 ������
=========================================

﻿//--------------------------------------------------------------------
// 2025. 3-2. 프로그래밍언어, 9월 8일 월요일 (2주 1일)
//--------------------------------------------------------------------

#include <iostream>
#include <print>
#include "save.h"

// [문제] 전체 구구단을 예시와 꼭 같이 그대로 출력하라 (줄맞춤)
// 단과 단 사이는 한 줄 띄워라

// (예시)
// 7 x 1 =  7
// 7 x 2 = 14
// ...

// 정답은 format이라고 한다.

int main()
{
	for (int dan = 2; dan <= 9; ++dan) {
		for (int i = 1; i <= 9; ++i) {
			std::println("{0} x {1} = {2:>20}", dan, i, dan * i); 
			// #include <print> 사용
		}
		std::cout << '\n';
	}
	save("메인.cpp");
}

=========================================
Save Time: 2025-09-08 ���� 6:14:28 ������
=========================================

﻿//--------------------------------------------------------------------
// 2025. 3-2. 프로그래밍언어, 9월 8일 월요일 (2주 1일)
//--------------------------------------------------------------------

#include <iostream>
#include <print>
#include "save.h"

// [문제] 전체 구구단을 예시와 꼭 같이 그대로 출력하라 (줄맞춤)
// 단과 단 사이는 한 줄 띄워라

// (예시)
// 7 x 1 =  7
// 7 x 2 = 14
// ...

// 정답은 format이라고 한다.

int main()
{
	for (int dan = 2; dan <= 9; ++dan) {
		for (int i = 1; i <= 9; ++i) {
			std::println("{0} x {1} = {2:>20}", dan, i, dan * i); 
			// #include <print> 사용
		}
		std::cout << '\n';
	}
	save("메인.cpp");
}

=========================================
Save Time: 2025-09-08 ���� 6:14:57 ������
=========================================

﻿//--------------------------------------------------------------------
// 2025. 3-2. 프로그래밍언어, 9월 8일 월요일 (2주 1일)
//--------------------------------------------------------------------

#include <iostream>
#include <print>
#include "save.h"

// [문제] 전체 구구단을 예시와 꼭 같이 그대로 출력하라 (줄맞춤)
// 단과 단 사이는 한 줄 띄워라

// (예시)
// 7 x 1 =  7
// 7 x 2 = 14
// ...

// 정답은 format이라고 한다.

int main()
{
	for (int dan = 2; dan <= 9; ++dan) {
		for (int i = 1; i <= 9; ++i) {
			std::println("{0} x {1} = {2:^20}", dan, i, dan * i); 
			// #include <print> 사용
		}
		std::cout << '\n';
	}
	save("메인.cpp");
}

=========================================
Save Time: 2025-09-08 ���� 6:15:18 ������
=========================================

﻿//--------------------------------------------------------------------
// 2025. 3-2. 프로그래밍언어, 9월 8일 월요일 (2주 1일)
//--------------------------------------------------------------------

#include <iostream>
#include <print>
#include "save.h"

// [문제] 전체 구구단을 예시와 꼭 같이 그대로 출력하라 (줄맞춤)
// 단과 단 사이는 한 줄 띄워라

// (예시)
// 7 x 1 =  7
// 7 x 2 = 14
// ...

// 정답은 format이라고 한다.

int main()
{
	for (int dan = 2; dan <= 9; ++dan) {
		for (int i = 1; i <= 9; ++i) {
			std::println("{1} x {0} = {2:^20}", dan, i, dan * i); 
			// #include <print> 사용
		}
		std::cout << '\n';
	}
	save("메인.cpp");
}

=========================================
Save Time: 2025-09-08 ���� 6:20:26 ������
=========================================

﻿//--------------------------------------------------------------------
// 2025. 3-2. 프로그래밍언어, 9월 8일 월요일 (2주 1일)
//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

//--------
int main()
//--------
{
	int n = 1234;

	std::cout << "현재 n에 저장된 값 - " << n << '\n';

	save("메인.cpp");
}

=========================================
Save Time: 2025-09-08 ���� 6:25:37 ������
=========================================

﻿//--------------------------------------------------------------------
// 2025. 3-2. 프로그래밍언어, 9월 8일 월요일 (2주 1일)
//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

// int에 저장할 수 있는 값 중에서 가장 큰 값을 저장하라.

//--------
int main()
//--------
{
	int n;
	
	//n이라는 32bit에 1로 모두 채우는 법
	n = ~0; // 0을 비트 반전

	std::cout << "현재 n에 저장된 값 - " << n << '\n';

	save("메인.cpp");
}

=========================================
Save Time: 2025-09-08 ���� 6:26:19 ������
=========================================

﻿//--------------------------------------------------------------------
// 2025. 3-2. 프로그래밍언어, 9월 8일 월요일 (2주 1일)
//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

// int에 저장할 수 있는 값 중에서 가장 큰 값을 저장하라.

//--------
int main()
//--------
{
	int n;
	
	//n이라는 32bit에 1로 모두 채우는 법 맨 앞만 0으로 채우는 법
	n = (1 << 31) - 1;

	std::cout << "현재 n에 저장된 값 - " << n << '\n';

	save("메인.cpp");
}

=========================================
Save Time: 2025-09-08 ���� 6:28:01 ������
=========================================

﻿//--------------------------------------------------------------------
// 2025. 3-2. 프로그래밍언어, 9월 8일 월요일 (2주 1일)
//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

// int에 저장할 수 있는 값 중에서 가장 큰 값을 저장하라.

//--------
int main()
//--------
{
	int n;
	
	//n이라는 32bit에 1로 모두 채우는 법 맨 앞만 0으로 채우는 법
	//n = (1 << 31) - 1;
	n = 0B01111111'11111111'11111111'11111111;

	std::cout << "현재 n에 저장된 값 - " << n << '\n';

	save("메인.cpp");
}

=========================================
Save Time: 9/8/2025 6:30:06 PM Monday
=========================================

﻿//--------------------------------------------------------------------
// 2025. 3-2. 프로그래밍언어, 9월 8일 월요일 (2주 1일)
//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

// int에 저장할 수 있는 값 중에서 가장 큰 값을 저장하라.

//--------
int main()
//--------
{
	int n = 0B01111111'11111111'11111111'11111111;

	n = n + 1;

	std::cout << "현재 n에 저장된 값 - " << n << '\n';

	save("메인.cpp");
}

=========================================
Save Time: 9/8/2025 6:32:57 PM Monday
=========================================

﻿//--------------------------------------------------------------------
// 2025. 3-2. 프로그래밍언어, 9월 8일 월요일 (2주 1일)
//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include <bitset> 
#include "save.h"

// int에 저장할 수 있는 값 중에서 가장 큰 값을 저장하라.

//--------
int main()
//--------
{
	int n = 0B01111111'11111111'11111111'11111111;

	n = n + 1;

	std::cout << "현재 n에 저장된 값 - " << n << '\n';

	std::cout << "n의 메모리를 화면에 그대로 출력하면" << '\n';
	std::cout << std::bitset<32>(n) << '\n';
	// #include <bitset> // 이걸 이용해서 가능, 평생 쓸일은 없을거임

	save("메인.cpp");
}

=========================================
Save Time: 9/8/2025 6:33:27 PM Monday
=========================================

﻿//--------------------------------------------------------------------
// 2025. 3-2. 프로그래밍언어, 9월 8일 월요일 (2주 1일)
//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include <bitset> 
#include "save.h"

// int에 저장할 수 있는 값 중에서 가장 큰 값을 저장하라.

//--------
int main()
//--------
{
	int n = 0B01111111'11111111'11111111'11111111;

	//n = n + 1;

	std::cout << "현재 n에 저장된 값 - " << n << '\n';

	std::cout << "n의 메모리를 화면에 그대로 출력하면" << '\n';
	std::cout << std::bitset<32>(n) << '\n';
	// #include <bitset> // 이걸 이용해서 가능, 평생 쓸일은 없을거임

	// C++은 메모리를 공부하는 언어

	save("메인.cpp");
}

=========================================
Save Time: 9/8/2025 6:35:23 PM Monday
=========================================

﻿//--------------------------------------------------------------------
// 2025. 3-2. 프로그래밍언어, 9월 8일 월요일 (2주 1일)
//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include <bitset> 
#include "save.h"

// int에 저장할 수 있는 값 중에서 가장 큰 값을 저장하라.

//--------
int main()
//--------
{
	int n = 1024; //1KB
	std::cout << std::bitset<32>(n) << '\n';

	save("메인.cpp");
}

=========================================
Save Time: 9/8/2025 6:36:52 PM Monday
=========================================

﻿//--------------------------------------------------------------------
// 2025. 3-2. 프로그래밍언어, 9월 8일 월요일 (2주 1일)
//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include <bitset> 
#include "save.h"

// int에 저장할 수 있는 값 중에서 가장 큰 값을 저장하라.

//--------
int main()
//--------
{
	int n = 1024 * 1024;
	std::cout << std::bitset<32>(n) << '\n';

	save("메인.cpp");
}

=========================================
Save Time: 9/8/2025 6:37:30 PM Monday
=========================================

﻿//--------------------------------------------------------------------
// 2025. 3-2. 프로그래밍언어, 9월 8일 월요일 (2주 1일)
//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include <bitset> 
#include "save.h"

// int에 저장할 수 있는 값 중에서 가장 큰 값을 저장하라.

//--------
int main()
//--------
{
	int n = 1023;
	std::cout << std::bitset<32>(n) << '\n';

	save("메인.cpp");
}

=========================================
Save Time: 9/8/2025 6:38:03 PM Monday
=========================================

﻿//--------------------------------------------------------------------
// 2025. 3-2. 프로그래밍언어, 9월 8일 월요일 (2주 1일)
//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include <bitset> 
#include "save.h"

// int에 저장할 수 있는 값 중에서 가장 큰 값을 저장하라.

//--------
int main()
//--------
{
	int n = 1024 * 1024 * 1024 * 1024; // KB, MB, GB, TB
	std::cout << std::bitset<32>(n) << '\n';

	save("메인.cpp");
}

=========================================
Save Time: 9/8/2025 6:38:24 PM Monday
=========================================

﻿//--------------------------------------------------------------------
// 2025. 3-2. 프로그래밍언어, 9월 8일 월요일 (2주 1일)
//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include <bitset> 
#include "save.h"

// int에 저장할 수 있는 값 중에서 가장 큰 값을 저장하라.

//--------
int main()
//--------
{
	int n = 1024 * 1024 * 1024 * 1024; // KB, MB, GB, TB
	std::cout << std::bitset<64>(n) << '\n';

	save("메인.cpp");
}

=========================================
Save Time: 9/8/2025 6:38:35 PM Monday
=========================================

﻿//--------------------------------------------------------------------
// 2025. 3-2. 프로그래밍언어, 9월 8일 월요일 (2주 1일)
//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include <bitset> 
#include "save.h"

// int에 저장할 수 있는 값 중에서 가장 큰 값을 저장하라.

//--------
int main()
//--------
{
	int n = 1024 * 1024 * 1024 * 1024; // KB, MB, GB, TB
	std::cout << std::bitset<86>(n) << '\n';

	save("메인.cpp");
}

=========================================
Save Time: 9/8/2025 6:38:48 PM Monday
=========================================

﻿//--------------------------------------------------------------------
// 2025. 3-2. 프로그래밍언어, 9월 8일 월요일 (2주 1일)
//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include <bitset> 
#include "save.h"

// int에 저장할 수 있는 값 중에서 가장 큰 값을 저장하라.

//--------
int main()
//--------
{
	int n = 1024 * 1024 * 1024; // KB, MB, GB
	std::cout << std::bitset<32>(n) << '\n';

	save("메인.cpp");
}

=========================================
Save Time: 9/8/2025 6:40:59 PM Monday
=========================================

﻿//--------------------------------------------------------------------
// 2025. 3-2. 프로그래밍언어, 9월 8일 월요일 (2주 1일)
//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include <bitset> 
#include "save.h"

// int에 저장할 수 있는 값 중에서 가장 큰 값을 저장하라.

//--------
int main()
//--------
{
	//int n = 0B01111111'11111111'11111111'11111111; // <-- 이거 절대 안쓴다.
	int n = 0x7F'FF'FF'FF; // 16진수는 2진수를 다루기 위해 있는거다.
	std::cout << n << '\n';

	save("메인.cpp");
}

=========================================
Save Time: 9/8/2025 6:48:45 PM Monday
=========================================

﻿//--------------------------------------------------------------------
// 2025. 3-2. 프로그래밍언어, 9월 8일 월요일 (2주 1일)
//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

// int에 저장할 수 있는 값 중에서 가장 큰 값을 저장하라.

//--------
int main()
//--------
{
	// int는 4바이트가 아니다?
	// 표준	: int는 최소 2바이트 이상이어야 한다.
	// 실제	: int는 보통 4바이트이다.

	int n = std::numeric_limits<int>::max();

	std::cout << n << '\n';

	save("메인.cpp");
}

=========================================
Save Time: 9/8/2025 6:49:23 PM Monday
=========================================

﻿//--------------------------------------------------------------------
// 2025. 3-2. 프로그래밍언어, 9월 8일 월요일 (2주 1일)
//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

// int에 저장할 수 있는 값 중에서 가장 큰 값을 저장하라.

//--------
int main()
//--------
{
	int n = std::numeric_limits<int>::max();

	n += 1; // 오버플로우 발생, 음수의 최솟값이 됨

	std::cout << n << '\n';

	save("메인.cpp");
}

=========================================
Save Time: 9/8/2025 6:50:36 PM Monday
=========================================

﻿//--------------------------------------------------------------------
// 2025. 3-2. 프로그래밍언어, 9월 8일 월요일 (2주 1일)
//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

// int에 저장할 수 있는 값 중에서 가장 큰 값을 저장하라.

//--------
int main()
//--------
{
	long long n = std::numeric_limits<long long>::max(); 
	// long long int, short int 등에서 int 생략 가능

	std::cout << n << '\n';

	save("메인.cpp");
}

=========================================
Save Time: 9/8/2025 6:58:21 PM Monday
=========================================

﻿//--------------------------------------------------------------------
// 2025. 3-2. 프로그래밍언어, 9월 8일 월요일 (2주 1일)
//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include <bitset>
#include "save.h"

// [실습] 다른 기본 자료형도 지금 한 것과 같이 반복하며 메모리와 친해지자

//--------
int main()
//--------
{
	int n = 0x01020304;
	std::cout << std::bitset<32>(n) << '\n';

	/*int n = std::numeric_limits<int>::max();
	std::cout << "int_max : " << n << '\n';

	float f = std::numeric_limits<float>::max();
	std::cout << "float_max : " << f << '\n';

	double d = std::numeric_limits<double>::max();
	std::cout << "double_max : " << d << '\n';*/

	save("메인.cpp");
}

=========================================
Save Time: 9/8/2025 7:02:30 PM Monday
=========================================

﻿//--------------------------------------------------------------------
// 2025. 3-2. 프로그래밍언어, 9월 8일 월요일 (2주 1일)
//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include <bitset>
#include "save.h"

// [실습] 다른 기본 자료형도 지금 한 것과 같이 반복하며 메모리와 친해지자

//--------
int main()
//--------
{
	int n = 0x01020304;
	std::cout << std::bitset<32>(n) << '\n';

	// 메모리가 저장되는 순서는 기계에 따라 다르다
	// 이것을 little endian, big endian이라고 한다.
	// 조금만 설명하자면
	// 0x01020304라는 4바이트 정수를 메모리에 저장할 때
	// little endian은 04 03 02 01 순서로 저장하고
	// big endian은 01 02 03 04 순서로 저장한다.

	int n2 = std::numeric_limits<int>::max();
	std::cout << "int_max : " << n2 << '\n';

	float f = std::numeric_limits<float>::max();
	std::cout << "float_max : " << f << '\n';

	double d = std::numeric_limits<double>::max();
	std::cout << "double_max : " << d << '\n';

	save("메인.cpp");
}

=========================================
Save Time: 9/10/2025 5:38:48 PM Wednesday
=========================================

﻿//--------------------------------------------------------------------
// 2025. 3-2. 프로그래밍언어, 9월 10일 수요일 (2주 2일)
//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include <bitset>
#include "save.h"

// [실습] 다른 기본 자료형도 지금 한 것과 같이 반복하며 메모리와 친해지자

//--------
int main()
//--------
{
	char c;	
	int n;
	// int n; <- 이 문장 : 토큰이란, 컴퓨터가 구분할 수 있는 최소한의 문법적인 요소, 단위
	// 3개로 이루어진 문장이다.
	// int, n, ; : int와 n 두개의 token으로 이루어진 이 문장은 매우 특별하다.

	3 + 5;
	int;
	save("메인.cpp");
}

=========================================
Save Time: 9/10/2025 5:41:13 PM Wednesday
=========================================

﻿//--------------------------------------------------------------------
// 2025. 3-2. 프로그래밍언어, 9월 10일 수요일 (2주 2일)
//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include <bitset>
#include "save.h"

// [실습] 다른 기본 자료형도 지금 한 것과 같이 반복하며 메모리와 친해지자

//--------
int main()
//--------
{
	int n;		// 앞에 token은 자료형(data type)
				// 뒤에 token은 식별자(identifier)라고 한다.

	save("메인.cpp");
}

=========================================
Save Time: 9/10/2025 5:59:05 PM Wednesday
=========================================

﻿//--------------------------------------------------------------------
// 2025. 3-2. 프로그래밍언어, 9월 10일 수요일 (2주 2일)
//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include <bitset>
#include "save.h"

// [실습] 다른 기본 자료형도 지금 한 것과 같이 반복하며 메모리와 친해지자

//--------
int main()
//--------
{
	int n;		// 앞에 token은 자료형(data type)
				// 뒤에 token은 식별자(identifier)라고 한다.

	/*
		int n;
		
		int : 메모리를 sizeof int 만큼 요청
		n  : 요청한 메모리의 시작 주소를 n이라는 이름, 내 마음대로 이름 붙인 식별자이다.

		<Access : Read Access, Write Access>
		==================================================================
		n이라는 이름으로 메모리에 access 할 수 있는 이유는
		컴파일할 때 그 메모리 주소를 결정할 수 있기 때문에 이런 코딩이 가능하다.
		번지수가 n이라는 이름으로 딱 결정되는 것이다.

		폰 노이만 구조 찾아보기.
		==================================================================
	*/

	save("메인.cpp");
}

=========================================
Save Time: 9/10/2025 6:05:22 PM Wednesday
=========================================

﻿//--------------------------------------------------------------------
// 2025. 3-2. 프로그래밍언어, 9월 10일 수요일 (2주 2일)
//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

// 메모리를 달라는 요청은 3가지(메모리가 생성되는 위치) 밖에 없다.
// 1. 지역변수(스택 메모리) - 함수가 호출될 때
// 2. 전역변수(글로벌 변수) - 프로그램이 시작될 때
// 3. 동적할당(힙 메모리) - 개발자가 요청할 때

int n; // 2. 전역변수(Global)

//--------
int main()
//--------
{
	int n;	// 1. 지역변수(Local)
	
	new int; // 3. 동적할당(Dynamic Allocation)

	save("메인.cpp");
}

=========================================
Save Time: 9/10/2025 6:07:13 PM Wednesday
=========================================

﻿//--------------------------------------------------------------------
// 2025. 3-2. 프로그래밍언어, 9월 10일 수요일 (2주 2일)
//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

// 메모리를 달라는 요청은 3가지(메모리가 생성되는 위치) 밖에 없다.

// [실습] 각 메모리의 위치를 출력해본다.

int n; // 2. 전역변수(Global)

//--------
int main()
//--------
{
	int n;	// 1. 지역변수(Local)
	std::cout << "지역변수 n의 주소: " << std::addressof(n) << '\n';
	
	new int; // 3. 동적할당(Dynamic Allocation)

	save("메인.cpp");
}

=========================================
Save Time: 9/10/2025 6:08:58 PM Wednesday
=========================================

﻿//--------------------------------------------------------------------
// 2025. 3-2. 프로그래밍언어, 9월 10일 수요일 (2주 2일)
//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

// 메모리를 달라는 요청은 3가지(메모리가 생성되는 위치) 밖에 없다.

// [실습] 각 메모리의 위치를 출력해본다.

int n; // 2. 전역변수(Global)

//--------
int main()
//--------
{
	int n;	// 1. 지역변수(Local)
	std::cout << "지역변수 n의 주소: " << std::addressof(n) << '\n';
	std::cout << "전역변수 n의 주소: " << std::addressof(::n) << '\n'; 
	// 사실 이름을 바꾸는 게 맞지만, ::n으로 전역변수 접근이 가능하다.

	new int; // 3. 동적할당(Dynamic Allocation)

	save("메인.cpp");
}

=========================================
Save Time: 9/10/2025 6:11:10 PM Wednesday
=========================================

﻿//--------------------------------------------------------------------
// 2025. 3-2. 프로그래밍언어, 9월 10일 수요일 (2주 2일)
//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

//--------
int main()
//--------
{
	float f;
	int n;

	std::cout << "f의 번지 - " << std::addressof(f) << '\n';
	std::cout << "n의 번지 - " << std::addressof(n) << '\n';

	// 둘 다 지역변수이므로 유사한 번지를 갖는다.

	save("메인.cpp");
}

=========================================
Save Time: 9/10/2025 6:11:39 PM Wednesday
=========================================

﻿//--------------------------------------------------------------------
// 2025. 3-2. 프로그래밍언어, 9월 10일 수요일 (2주 2일)
//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

//--------
int main()
//--------
{
	float f;
	int n;

	std::cout << "f의 번지 - " << std::addressof(f) << '\n';
	std::cout << "n의 번지 - " << std::addressof(n) << '\n';

	// 둘 다 지역변수이므로 유사한 번지를 갖는다.
	// f의 번지 - 000000293ACFF624
	// n의 번지 - 000000293ACFF644

	save("메인.cpp");
}

=========================================
Save Time: 9/10/2025 6:13:42 PM Wednesday
=========================================

﻿//--------------------------------------------------------------------
// 2025. 3-2. 프로그래밍언어, 9월 10일 수요일 (2주 2일)
//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

int a, b;

//--------
int main()
//--------
{
	float f;
	int n;

	std::cout << "f의 번지 - " << std::addressof(f) << '\n';
	std::cout << "n의 번지 - " << std::addressof(n) << '\n';
	std::cout << '\n';

	std::cout << "a의 번지 - " << std::addressof(a) << '\n';
	std::cout << "b의 번지 - " << std::addressof(b) << '\n';

	save("메인.cpp");
}

=========================================
Save Time: 9/10/2025 6:21:21 PM Wednesday
=========================================

﻿//--------------------------------------------------------------------
// 2025. 3-2. 프로그래밍언어, 9월 10일 수요일 (2주 2일)
//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

//--------
int main()
//--------
{

	/*
	낮은 번지	STACK - 지역변수가 저장되는 영역						int main() { *----* }
				Free Store (Heap) - 동적할당된 변수가 저장되는 영역	*new int;*
	높은 번지	DATA - 전역변수가 저장되는 영역						*----* int main() {}
	*/

	save("메인.cpp");
}

=========================================
Save Time: 9/10/2025 6:25:58 PM Wednesday
=========================================

﻿//--------------------------------------------------------------------
// 2025. 3-2. 프로그래밍언어, 9월 10일 수요일 (2주 2일)
//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

//--------
int main()
//--------
{
	int n;

	// 이름 붙인 변수 n이 있다면 이것의 정체를 언제나 다음 3가지 코드로 파악할 수 있다.
	
	std::cout << "n의 메모리 크기 - " << sizeof n << "\n"; // 유일하게 sizeof는 괄호 생략 표현이 가능
	std::cout << "n의 메모리 주소 - " << std::addressof(n) << "\n";
	std::cout << "n의 데이터 타입 - " << typeid(n).name() << "\n";

	save("메인.cpp");
}

=========================================
Save Time: 9/10/2025 6:26:35 PM Wednesday
=========================================

﻿//--------------------------------------------------------------------
// 2025. 3-2. 프로그래밍언어, 9월 10일 수요일 (2주 2일)
//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

//--------
int main()
//--------
{
	float n;

	// 이름 붙인 변수 n이 있다면 이것의 정체를 언제나 다음 3가지 코드로 파악할 수 있다.
	
	std::cout << "n의 메모리 크기 - " << sizeof n << "\n"; // 유일하게 sizeof는 괄호 생략 표현이 가능
	std::cout << "n의 메모리 주소 - " << std::addressof(n) << "\n";
	std::cout << "n의 데이터 타입 - " << typeid(n).name() << "\n";

	save("메인.cpp");
}

=========================================
Save Time: 9/10/2025 6:26:44 PM Wednesday
=========================================

﻿//--------------------------------------------------------------------
// 2025. 3-2. 프로그래밍언어, 9월 10일 수요일 (2주 2일)
//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

//--------
int main()
//--------
{
	long long n;

	// 이름 붙인 변수 n이 있다면 이것의 정체를 언제나 다음 3가지 코드로 파악할 수 있다.
	
	std::cout << "n의 메모리 크기 - " << sizeof n << "\n"; // 유일하게 sizeof는 괄호 생략 표현이 가능
	std::cout << "n의 메모리 주소 - " << std::addressof(n) << "\n";
	std::cout << "n의 데이터 타입 - " << typeid(n).name() << "\n";

	save("메인.cpp");
}

=========================================
Save Time: 9/10/2025 6:27:58 PM Wednesday
=========================================

﻿//--------------------------------------------------------------------
// 2025. 3-2. 프로그래밍언어, 9월 10일 수요일 (2주 2일)
//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

//--------
int main()
//--------
{
	// [실습] 다른 type으로 바꿔 관찰
	char n;

	// 이름 붙인 변수 n이 있다면 이것의 정체를 언제나 다음 3가지 코드로 파악할 수 있다.
	
	std::cout << "n의 메모리 크기 - " << sizeof n << "\n"; // 유일하게 sizeof는 괄호 생략 표현이 가능
	std::cout << "n의 메모리 주소 - " << std::addressof(n) << "\n";
	std::cout << "n의 데이터 타입 - " << typeid(n).name() << "\n";

	save("메인.cpp");
}

=========================================
Save Time: 9/10/2025 6:28:10 PM Wednesday
=========================================

﻿//--------------------------------------------------------------------
// 2025. 3-2. 프로그래밍언어, 9월 10일 수요일 (2주 2일)
//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

//--------
int main()
//--------
{
	// [실습] 다른 type으로 바꿔 관찰
	char n;

	// 이름 붙인 변수 n이 있다면 이것의 정체를 언제나 다음 3가지 코드로 파악할 수 있다.
	
	std::cout << "n의 메모리 크기 - " << sizeof n << "\n"; // 유일하게 sizeof는 괄호 생략 표현이 가능
	std::cout << "n의 메모리 주소 - " << std::addressof(n) << "\n";
	std::cout << "n의 데이터 타입 - " << typeid(n).name() << "\n";

	save("메인.cpp");
}

=========================================
Save Time: 9/10/2025 6:28:48 PM Wednesday
=========================================

﻿//--------------------------------------------------------------------
// 2025. 3-2. 프로그래밍언어, 9월 10일 수요일 (2주 2일)
//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

//--------
int main()
//--------
{
	// [실습] 다른 type으로 바꿔 관찰
	bool n;

	// 이름 붙인 변수 n이 있다면 이것의 정체를 언제나 다음 3가지 코드로 파악할 수 있다.
	
	std::cout << "n의 메모리 크기 - " << sizeof n << "\n"; // 유일하게 sizeof는 괄호 생략 표현이 가능
	std::cout << "n의 메모리 주소 - " << std::addressof(n) << "\n";
	std::cout << "n의 데이터 타입 - " << typeid(n).name() << "\n";

	save("메인.cpp");
}

=========================================
Save Time: 9/10/2025 6:30:26 PM Wednesday
=========================================

﻿//--------------------------------------------------------------------
// 2025. 3-2. 프로그래밍언어, 9월 10일 수요일 (2주 2일)
//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

//--------
int main()
//--------
{
	// [실습] 다른 type으로 바꿔 관찰
	char n; 
	// 왜 얘만 메모리 주소가 깨지냐? 

	// 이름 붙인 변수 n이 있다면 이것의 정체를 언제나 다음 3가지 코드로 파악할 수 있다.
	
	std::cout << "n의 메모리 크기 - " << sizeof n << "\n"; // 유일하게 sizeof는 괄호 생략 표현이 가능
	std::cout << "n의 메모리 주소 - " << std::addressof(n) << "\n";
	std::cout << "n의 데이터 타입 - " << typeid(n).name() << "\n";

	save("메인.cpp");
}

=========================================
Save Time: 9/10/2025 6:31:53 PM Wednesday
=========================================

﻿//--------------------------------------------------------------------
// 2025. 3-2. 프로그래밍언어, 9월 10일 수요일 (2주 2일)
//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

//--------
int main()
//--------
{
	// [실습] 다른 type으로 바꿔 관찰
	char n; 
	// 왜 얘만 메모리 주소가 깨지냐? 

	// 이름 붙인 변수 n이 있다면 이것의 정체를 언제나 다음 3가지 코드로 파악할 수 있다.
	
	std::cout << "n의 메모리 크기 - " << sizeof n << "\n"; // 유일하게 sizeof는 괄호 생략 표현이 가능
	std::cout << "n의 메모리 주소 - " << (void*)std::addressof(n) << "\n";
	std::cout << "n의 데이터 타입 - " << typeid(n).name() << "\n";

	save("메인.cpp");
}

=========================================
Save Time: 9/10/2025 6:38:39 PM Wednesday
=========================================

﻿//--------------------------------------------------------------------
// 2025. 3-2. 프로그래밍언어, 9월 10일 수요일 (2주 2일)
//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

//--------
int main()
//--------
{
	// [실습] 다른 type으로 바꿔 관찰
	nullptr_t n;

	// 이름 붙인 변수 n이 있다면 이것의 정체를 언제나 다음 3가지 코드로 파악할 수 있다.
	
	std::cout << "n의 메모리 크기 - " << sizeof n << "\n"; // 유일하게 sizeof는 괄호 생략 표현이 가능
	std::cout << "n의 메모리 주소 - " << std::addressof(n) << "\n";
	std::cout << "n의 데이터 타입 - " << typeid(n).name() << "\n";

	save("메인.cpp");
}

=========================================
Save Time: 9/10/2025 6:39:17 PM Wednesday
=========================================

﻿//--------------------------------------------------------------------
// 2025. 3-2. 프로그래밍언어, 9월 10일 수요일 (2주 2일)
//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

//--------
int main()
//--------
{
	// [실습] 다른 type으로 바꿔 관찰
	unsigned long long int n;

	// 이름 붙인 변수 n이 있다면 이것의 정체를 언제나 다음 3가지 코드로 파악할 수 있다.
	
	std::cout << "n의 메모리 크기 - " << sizeof n << "\n"; // 유일하게 sizeof는 괄호 생략 표현이 가능
	std::cout << "n의 메모리 주소 - " << std::addressof(n) << "\n";
	std::cout << "n의 데이터 타입 - " << typeid(n).name() << "\n";

	save("메인.cpp");
}

=========================================
Save Time: 9/10/2025 6:41:05 PM Wednesday
=========================================

﻿//--------------------------------------------------------------------
// 2025. 3-2. 프로그래밍언어, 9월 10일 수요일 (2주 2일)
//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

class Player
{
	char name[1234];
	int hp{ 100 };
	int mp{ 50 };
	int exp{ 0 };
	int level{ 1 };
};

//--------
int main()
//--------
{
	// [실습] 다른 type으로 바꿔 관찰
	Player n;

	// 이름 붙인 변수 n이 있다면 이것의 정체를 언제나 다음 3가지 코드로 파악할 수 있다.
	
	std::cout << "n의 메모리 크기 - " << sizeof n << "\n"; // 유일하게 sizeof는 괄호 생략 표현이 가능
	std::cout << "n의 메모리 주소 - " << std::addressof(n) << "\n";
	std::cout << "n의 데이터 타입 - " << typeid(n).name() << "\n";

	save("메인.cpp");
}

=========================================
Save Time: 9/10/2025 6:42:30 PM Wednesday
=========================================

﻿//--------------------------------------------------------------------
// 2025. 3-2. 프로그래밍언어, 9월 10일 수요일 (2주 2일)
//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

//--------
int main()
//--------
{
	// [실습] 다른 type으로 바꿔 관찰
	char n;

	// 이름 붙인 변수 n이 있다면 이것의 정체를 언제나 다음 3가지 코드로 파악할 수 있다.
	
	std::cout << "n의 메모리 크기 - " << sizeof n << "\n"; // 유일하게 sizeof는 괄호 생략 표현이 가능
	std::cout << "n의 메모리 주소 - " << std::addressof(n) << "\n";
	std::cout << "n의 데이터 타입 - " << typeid(n).name() << "\n";

	save("메인.cpp");
}

=========================================
Save Time: 9/10/2025 6:42:42 PM Wednesday
=========================================

﻿//--------------------------------------------------------------------
// 2025. 3-2. 프로그래밍언어, 9월 10일 수요일 (2주 2일)
//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

//--------
int main()
//--------
{
	// [실습] 다른 type으로 바꿔 관찰
	char n{'F'};

	// 이름 붙인 변수 n이 있다면 이것의 정체를 언제나 다음 3가지 코드로 파악할 수 있다.
	
	std::cout << "n의 메모리 크기 - " << sizeof n << "\n"; // 유일하게 sizeof는 괄호 생략 표현이 가능
	std::cout << "n의 메모리 주소 - " << std::addressof(n) << "\n";
	std::cout << "n의 데이터 타입 - " << typeid(n).name() << "\n";

	save("메인.cpp");
}

=========================================
Save Time: 9/10/2025 6:43:14 PM Wednesday
=========================================

﻿//--------------------------------------------------------------------
// 2025. 3-2. 프로그래밍언어, 9월 10일 수요일 (2주 2일)
//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

//--------
int main()
//--------
{
	// [실습] 다른 type으로 바꿔 관찰
	char n{'7'};

	// 이름 붙인 변수 n이 있다면 이것의 정체를 언제나 다음 3가지 코드로 파악할 수 있다.
	
	std::cout << "n의 메모리 크기 - " << sizeof n << "\n"; // 유일하게 sizeof는 괄호 생략 표현이 가능
	std::cout << "n의 메모리 주소 - " << std::addressof(n) << "\n";
	std::cout << "n의 데이터 타입 - " << typeid(n).name() << "\n";

	save("메인.cpp");
}

=========================================
Save Time: 9/10/2025 6:43:33 PM Wednesday
=========================================

﻿//--------------------------------------------------------------------
// 2025. 3-2. 프로그래밍언어, 9월 10일 수요일 (2주 2일)
//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

//--------
int main()
//--------
{
	// [실습] 다른 type으로 바꿔 관찰
	char n{'!'};

	// 이름 붙인 변수 n이 있다면 이것의 정체를 언제나 다음 3가지 코드로 파악할 수 있다.
	
	std::cout << "n의 메모리 크기 - " << sizeof n << "\n"; // 유일하게 sizeof는 괄호 생략 표현이 가능
	std::cout << "n의 메모리 주소 - " << std::addressof(n) << "\n";
	std::cout << "n의 데이터 타입 - " << typeid(n).name() << "\n";

	save("메인.cpp");
}

=========================================
Save Time: 9/10/2025 6:46:38 PM Wednesday
=========================================

﻿//--------------------------------------------------------------------
// 2025. 3-2. 프로그래밍언어, 9월 10일 수요일 (2주 2일)
//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

//--------
int main()
//--------
{
	// [실습] 다른 type으로 바꿔 관찰
	char n{'!'};

	std::cout << "n의 메모리 크기 - " << sizeof n << "\n"; 
	std::cout << "n의 메모리 주소 - " << (int*)std::addressof(n) << "\n";
	std::cout << "n의 데이터 타입 - " << typeid(n).name() << "\n";

	save("메인.cpp");
}

=========================================
Save Time: 9/10/2025 6:46:46 PM Wednesday
=========================================

﻿//--------------------------------------------------------------------
// 2025. 3-2. 프로그래밍언어, 9월 10일 수요일 (2주 2일)
//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

//--------
int main()
//--------
{
	// [실습] 다른 type으로 바꿔 관찰
	char n{'!'};

	std::cout << "n의 메모리 크기 - " << sizeof n << "\n"; 
	std::cout << "n의 메모리 주소 - " << (void*)std::addressof(n) << "\n";
	std::cout << "n의 데이터 타입 - " << typeid(n).name() << "\n";

	save("메인.cpp");
}

=========================================
Save Time: 9/10/2025 6:48:32 PM Wednesday
=========================================

﻿//--------------------------------------------------------------------
// 2025. 3-2. 프로그래밍언어, 9월 10일 수요일 (2주 2일)
//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

//--------
int main()
//--------
{
	// [실습] 다른 type으로 바꿔 관찰
	char n{'!'};

	std::cout << "n의 메모리 크기 - " << sizeof n << "\n"; 
	std::cout << "n의 메모리 주소 - " << (void*)std::addressof(n) << "\n"; 
	// addressof()는 char n을 반환할 때 char*로 반환하기 때문에 void*로 형변환하여 std::cout을 속일 수 있다.
	// (std::cout은 char*를 출력할 때 문자열로 인식하기 때문)
	std::cout << "n의 데이터 타입 - " << typeid(n).name() << "\n";

	save("메인.cpp");
}

=========================================
Save Time: 9/10/2025 6:52:03 PM Wednesday
=========================================

﻿//--------------------------------------------------------------------
// 2025. 3-2. 프로그래밍언어, 9월 10일 수요일 (2주 2일)
//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

// [문제] int값 2개를 입력받아 합계를 알려주는 함수 add를 작성하라.
// 다음 main이 문제없이 실행되어야 한다.
int add(int a, int b)
{
	return a + b;
}

//--------
int main()
//--------
{
	std::cout << "합계를 알려줍니다" << '\n';
	std::cout << "int값 2개를 입력하세요: ";
	int a, b;
	std::cin >> a >> b;
	std::cout << a << " + " << b << " = " << add(a, b) << '\n';

	save("메인.cpp");
}

=========================================
Save Time: 9/10/2025 6:52:38 PM Wednesday
=========================================

﻿//--------------------------------------------------------------------
// 2025. 3-2. 프로그래밍언어, 9월 10일 수요일 (2주 2일)
//--------------------------------------------------------------------
// 자료형과 변수
//--------------------------------------------------------------------

#include <iostream>
#include "save.h"

// [문제] int값 2개를 입력받아 합계를 알려주는 함수 add를 작성하라.
// 다음 main이 문제없이 실행되어야 한다.
#define add(a, b) ((a) + (b))

//--------
int main()
//--------
{
	std::cout << "합계를 알려줍니다" << '\n';
	std::cout << "int값 2개를 입력하세요: ";
	int a, b;
	std::cin >> a >> b;
	std::cout << a << " + " << b << " = " << add(a, b) << '\n';

	save("메인.cpp");
}